<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Android 源码目录结构]]></title>
    <url>%2Fblog%2F2019%2F08%2F05%2FAndroid%20%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[一级目录： art - Android Runtime，一种app运行模式，区别去传统的Dalvik虚拟机，目的是提高android系统的流畅性。 bionic - 集成C库源代码，android改造的c/c++库。 bootable - android程序启动引导，适合各种bootloader的通用代码。包括一个recovery目录。 build - 存放系统编译规则以及generic等基础开发包配置。 compatibility - android 兼容计划。 cts - android兼容性测试标准。 dalvik - android dalvik虚拟机相关内容。 developers - 开发者参考文档。 development - android 应用开发基础设施相关。 device - android 支持的各种设备及相关配置。 external - android 中使用的各种外部开源库。 frameworks - 应用层框架，android系统的核心部分，又java、c++实现。 hardware - 硬件适配接口。 kernel - linux 内核，android 默认不提供，只有一个tests目录，需要另外下载。 libcore - android java 核心类库。 libnativehelper - android 动态库，实现jni的基础。 packages - 应用程序包。 pdk - Plug development kit，本地开发套件。 plaform_testing - android 平台测试程序。 prebuilds - x86 和 arm 架构下预编译的一些资源。 sdk - android java层SDK。 system - android底层文件系统库，应用、组件。 test - android Vendor测试框架。 toolchain - android 工具链文件。 tools - android 工具文件。 Android.bp - android 7.0 开始代替 android.mk 文件， 它告诉ndk将jni编译为动态库的脚本。 Makefile - 全局Makefile文件，用来定义编译规则。 framework 二级目录 ： av - 多媒体框架。 base - android 源码的主要核心目录。 compile - 编译相关。 ex - 文件解析器。 hardware - 硬件适配接口。 layoutlib - 布局相关。 minikin - android 原生字体，连体字效果。 ml - 机器学习。 multidex - 多dex 加载器。 native - native 实现。 opt - 一些软件。 rs - Render Script ，创建3D接口。 support - framework 支持文件。 wilhelm - 基于 Khronos 的OpenGL ES/ OpenGLMax AL audio/multi media实现。 base 三级目录： apct-test - 性能优化测试。 api - android应用框架层声明类、属性、资源。 cmds - android 系统启动时用到的commands。 core - framwork的核心框架组件。 data - android系统下的资源(声音、视屏、字体、软盘等)。 docs - android 项目说明文档。 drm - 实现权限管理，数字内容解密等模块的工作。 graphics - 图像渲染模块。 keystore - 密钥库。 libs - 库信息(界面、存储、USB) location - 位置信息。 media - 手机媒体管理。 native - 本地方法实现（传感器、输入、界面、窗体）。 nfc-extras - 近场通讯。 obex - 蓝牙。 opengl - 2D、3D图形绘制。 pacakges - 框架床的实现(界面、服务、存储)。 proto - 协议框架。 rs - 资源框架。 samples - 例子程序。 sax - xml 解析器。 Services - 各种服务程序。 telecomm - telecomm 通信框架。 telephony - 电话通信框架。 tests - 各种测试。 vr - 虚拟现实相关。 wifi - wifi模块。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>aosp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android 优化构建速度]]></title>
    <url>%2Fblog%2F2019%2F08%2F01%2Fandroid%20%E4%BC%98%E5%8C%96%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[Apply plugin 的几种常见定义： apply plugin: ‘com.android.application’ 实际对应的原型是：com.android.build.gradle.AppExtension，表示此项目模块类型为Android App Module，对应构建生成的文件为.apk类型文件。 apply plugin: ‘com.android.library’ 实际对应的原型是：com.android.build.gradle.LibraryExtension，表示此项目模块类型为Android Library Module，对应构建生成的文件为.arr类型的文件。 apply plugin: ‘com.android.test’ 实际对应的原型是：com.android.build.gradle.TestExtension，表示此项目模块类型为Android test Module，可以在单个模块内通过targetProjectPath指定项目，用于对应项目的单元测试。 apply plugin: ‘com.android.feature’ 实际对应的原型是：com.android.build.gradle.FeatureExtension，表示此项目模块类型为Android feature Module，主要用于单个模块内实现特性，以支持Android Instant Apps。 Gradle 配置 defaultConfig 字段解释优化构建速度，参考 官方文档 1、开启离线模式，避免每次更新第三方库文件 2、用静态的版本依赖，避免更新 3、加大JVM 4、开启热启动；PS：第一次还是很慢，第二次会快很多 5、开启并发构建、启用缓存、开启守护进程 等 android Gradle 构建总结 参考Instant Run 工作原理和方法 参考]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置ABI的两种方式]]></title>
    <url>%2Fblog%2F2019%2F08%2F01%2F%E9%85%8D%E7%BD%AEABI%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[通过abiFilter字段配置： 一个是通过设置ndk的abiFilters字段，使apk能够兼容多种abi，但是这样会使得apk体积增大，所以，这种方式只适合配置主流的abi，使apk能在市场上的大部分手机成功安装使用。 123456789101112131415161718android &#123; ... // 其它配置 defaultConfig &#123; ... // 默认配置 ndk &#123; //选择要添加的对应cpu类型的.so库。 abiFilters &apos;armeabi&apos;, &apos;armeabi-v7a&apos; // 还可以添加 // &apos;arm64-v8a&apos;, 64 bit ARM architecture,it can use v7 version // unless you are too much concerned about performance // mips,mips64, There are no devices with MIPS // x86_64, No android devices and anyway it can use X86 version // armeabi, very old architecture. Unsupported after Android 4.4 // &apos;x86&apos;, Intel based devices &#125; &#125; ... // 其它配置&#125; 通过splits字段配置 splits的abi属性下面，定义好支持的abi，然后打包的时候，会根据不同的架构，打不同的包，每个包支持一种架构，这样能让不同架构的设备上安装最合适的apk，但是因为一个apk仅支持一种架构，所以互不兼容。 1234567891011android &#123; ... // 其它配置 splits &#123; abi &#123; reset() enable true // 设为true，才能在打包时根据架构生成不同的apk文件 universalApk false // If true, also generate a universal APK include &quot;armeabi-v7a&quot;, &quot;x86&quot; // 设置所有要支持的abi类型 &#125; &#125;&#125;]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Fblog%2F2019%2F08%2F01%2F%E7%A0%94%E7%A9%B6android%20%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fblog%2F2019%2F07%2F29%2FUntitled%201%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fblog%2F2019%2F07%2F29%2FAndroid%20Hook%20startActivity%2F</url>
    <content type="text"><![CDATA[https://www.jianshu.com/p/eb4121b037e2 hook onRequestPermissionsResult]]></content>
  </entry>
  <entry>
    <title><![CDATA[Jar加固]]></title>
    <url>%2Fblog%2F2019%2F07%2F25%2FJar%E5%8A%A0%E5%9B%BA%2F</url>
    <content type="text"><![CDATA[#####]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Q 线刷]]></title>
    <url>%2Fblog%2F2019%2F07%2F25%2FAndroid%20Q%20%E7%BA%BF%E5%88%B7%2F</url>
    <content type="text"><![CDATA[android Q 升级的两种方式：加入android测试版记录 官方网站：https://www.google.com/android/beta 1、优点是炒作简单 2、缺点是需要FQ，SS工具可能无法做到全局代理。如果在境外，或者有可以FQ的路由器应该没问题。 下载zip包，刷入手机 官方网站： https://developers.google.com/android/images 下载对应手机的zip文件，解压到指定目录。 更新 platform-tools到最新版本 手机打开开发者模式，去开发者选项中启动允许OEM解锁。 刷机之前，千万记得退出账号。 adb reboot bootloader 进入到 bootloader模式； fastboot flashing unlock 解锁手机 以pixel 2xl 为例，如果bootloader version 低于 TMZ20a（例如8.0系统），需要执行 fastboot flashing unlock 、fastboot flashing unlock_critical 两条命令解锁。高于TMZ20a的则只需要 fastboot flashing unlock即可。 如果出现 FAILED (remote: ‘Flashing Unlock is not allowed），可以先执行fastboot flashing lock 锁定 OEM，重启手机，然后再次去开发者选项中打开运行OEM解锁，进入 BootLoader模式，然后执行上面两条命令解锁。 执行 flash-all.sh 脚本 刷入ROM 执行 fastboot flashing lock 锁定OEM 我再刷入Android Q之后，在开机连接wifi阶段卡住了，一直通过不了； 尝试过： 1、PC FQ，手机通过wifi代理到PC FQ连接Google服务器，依然无法通过。 2、小米手机4G+FQ，pixel 2xl 通过小米共享的热点FQ，也不行。 3、然后试图刷低版本(8.0)尝试绕过，还是不行。 4、最终通过购买香港一日流量卡解决问题。PS：流量卡需要先激活，我是小米用流量卡，共享热点给Pixel 2XL 连接上的google。流量卡需要用可以正常使用的手机先激活。 5、应该是我的PC、小米 FQ 都没有做到全局代理，导致google的请求没有走代理连接不上服务器。如果有路由器能FQ最好。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>ROM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Espresso自动化测试]]></title>
    <url>%2Fblog%2F2019%2F07%2F24%2FEspresso%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[####]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Test</tag>
        <tag>Espresso</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android自动化测试]]></title>
    <url>%2Fblog%2F2019%2F07%2F24%2FAndroid%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[android 自动化测试工具介绍：Monkey 是Android SDK自带的测试工具，在测试过程中会向系统发送伪随机的用户事件流，如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试，也有日志输出。实际上该工具只能做程序做一些压力测试，由于测试事件和数据都是随机的，不能自定义，所以有很大的局限性。 参考链接：https://blog.csdn.net/hebbely/article/details/78901466 介绍了Monkey 及相关参数的用法。 MonkeyRunner 也是Android SDK提供的测试工具。严格意义上来说MonkeyRunner其实是一个Api工具包，比Monkey强大，可以编写测试脚本来自定义数据、事件。缺点是脚本用Python来写，对测试人员来说要求较高，有比较大的学习成本。 Instrumentation 是早期Google提供的Android自动化测试工具类，虽然在那时候JUnit也可以对Android进行测试，但是Instrumentation允许你对应用程序做更为复杂的测试，甚至是框架层面的。通过Instrumentation你可以模拟按键按下、抬起、屏幕点击、滚动等事件。Instrumentation是通过将主程序和测试程序运行在同一个进程来实现这些功能，你可以把Instrumentation看成一个类似Activity或者Service并且不带界面的组件，在程序运行期间监控你的主程序。缺点是对测试人员来说编写代码能力要求较高，需要对Android相关知识有一定了解，还需要配置AndroidManifest.xml文件，不能跨多个App。 UiAutomator 也是Android提供的自动化测试框架，基本上支持所有的Android事件操作，对比Instrumentation它不需要测试人员了解代码实现细节（可以用UiAutomatorviewer抓去App页面上的控件属性而不看源码）。基于Java，测试代码结构简单、编写容易、学习成本，一次编译，所有设备或模拟器都能运行测试，能跨App（比如：很多App有选择相册、打开相机拍照，这就是跨App测试）。缺点是只支持SDK 16（Android 4.1）及以上，不支持Hybird App、WebApp。 参考链接： https://blog.csdn.net/eclipsexys/article/details/45622813 Espresso 是Google的开源自动化测试框架。相对于Robotium和UIAutomator，它的特点是规模更小、更简洁，API更加精确，编写测试代码简单，容易快速上手。因为是基于Instrumentation的，所以不能跨App。 官方文档：https://developer.android.com/training/testing/espresso Selendroid 也是基于Instrumentation的测试框架，可以测试Native App、Hybird App、Web App，但是网上资料较少，社区活跃度也不大。 Robotium 也是基于Instrumentation的测试框架，目前国内外用的比较多，资料比较多，社区也比较活跃。缺点是对测试人员来说要有一定的Java基础，了解Android基本组件，不能跨App。 Athrun 是淘宝出的一个移动测试框架/平台，同时支持iOS和Android。Android部分也是基于Instrumentation，在Android原有的ActivityInstrumentationTestCase2类基础上进行了扩展，提供一整套面向对象的API。这里有详细介绍。 CSDN：https://blog.csdn.net/xiaobai20131118/article/details/43762527 官方文档没有找到，可能是已经关闭了。 Appium 是最近比较热门的框架，社区也很活跃。Appium是一个跨平台工具，它允许测试人员使用同样的接口、基于不同的平台写自动化测试代码，大大增加了测试套件间代码的复用性。android部分是基于UiAutomator和Selendroid。 官方文档：https://github.com/appium/appium/tree/master/docs/cn Macaca macaca 是阿里的提供的解决方案,android部分也是基于uiautomator，和AutomatorX很类似，集成了多个工具集。1.功能与AutomatorX基本相同，除了可以用wifi 2.网页的测试更好. 依赖过多，安装复杂。 官方文档：https://macacajs.github.io/zh/ AutomatorX AutomatorX是网易给出的一套解决方案，是集合了各个测试框架之后给的一个方案，所以目前看来功能点是最全的。支持夸平台。 官方文档：https://github.com/NetEaseGame/ATX]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 注解]]></title>
    <url>%2Fblog%2F2019%2F07%2F22%2FJava%20%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Java 注解 Java 注解定义： Java 注解又称标注，Java 5.0 开始支持，是一种特殊的语法元数据。 Java 语言中的包、类、方法、参数、变量都可以被标注。和Javadoc不同，标注可以通过反射或者标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java虚拟机可以保留标注内容，在运行时可以获取到标注内容。当然也支持自定义的标注。 Annotation Processing tool 即 apt tool，提供了一个补充性的编译时注解操作接口。 Java 内置的注解有： 作用在代码的注解： @override - 检查该方法是否是重载方法。如果发现其父类或者是引用的接口中并没有改方法时，会报编译错误。 @Deprecated - 标记过时方法。如果使用该方法，会报编译警告。 @SuppressWarnings - 指示编译器去忽略注解中声明的警告。 作用于其他注解的注解（或者说元注解）： @Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。 @Ducumented - 标记这个注解是否包含在用户文档中。 @Target - 标记这个注解应该是那种Java成员。 @Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类) 从Java 7 额外添加了3个注解： @SafeVarargs - Java 7 支持，忽略任何使用参数为泛型变量的方法或构造函数的调用产生的警告。 @FunctionalInterface - Java 8 开始支持，标识一个匿名函数或者函数式接口。 @Repeatable - Java 8 开始支持， 标识某注解可以在同一个声明是使用多次。 android 内置注解 @Nullable - 指示变量、参数、返回值可以为null。 @NonNull - 指示变量、参数、返回值不可以为null。 资源注解： @StringRes - 字符串标注，参数只接受R.string.tips， R.color.tips报错。虽然都是整形。 @DrawableRes - 以下都同上。 @DimenRes - @ColorRes - @InterpolatorRes - @LayoutRes - 线程注解：用于检测某个方法是否从指定类型的线程中调用。 @MainThread - @UIThread - @WorkerThread - @BinderThread - @AnyThread - 值约束注解： @IntRange - 验证传递参数的值的取值范围 @FloatRange - 同上 @Size - 验证传递参数的值（例如：数组等）的长度。 权限注解： @RequiresPermission - 验证方法调用方的权限。 返回值注解： @CheckResult - 验证调用方是否有对方法的返回值进行处理。 超类注解： @CallSuper - 验证子类重新父类的方法，是否有调用父类的实现，没有则报警告。 枚举注解： @Typedef - 可以确保特定的参数、返回值、字段引用特定的常量集。 代码可访问性注解： @Keep - 标注的类或者方法在混淆的时候不被混淆。 其他常见注解： @TargetApi - 用于屏蔽IDE对API版本的限制。即相当于告诉编译器标记的代码在指定的api上面运行。 @SuppressLint - 类似@TargetApi，屏蔽IDE对API版本的一切限制。 @Widget - 标记该类是自定义的Widget类。 测试可见注解： @VisibleForTesting - 标注是否对测试可见。 android 注解的特性： 1、依赖注入； 2、简化线程操作； 3、事件绑定； 4、No Magic，只是在编译的时候生成了子类，可以检查代码看是如何运行的。 5、体积小，无反射，没有运行时影响。不会影响性能。 运行时动态注解实现：参考 运行时注解一般和反射机制配合使用，相比编译时注解性能比较低，但灵活性好，实现起来比较简单。 创建注解，创建一个可以字符串相加的注解。 123456789101112package com.pa.test.test;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Retention(RetentionPolicy.RUNTIME)@Target(value = ElementType.FIELD)public @interface Append&#123; String str1() default "hello"; String str2() default "world";&#125; 用反射实现注解处理： 123456789101112131415161718192021222324252627package com.pa.test.test;import java.lang.reflect.Field;//importpublic class Inject &#123; public static void inject(final Object object)&#123; Field[] fields = object.getClass().getDeclaredFields(); for(Field field: fields)&#123; Append append = field.getAnnotation(Append.class); if(append != null)&#123; if(object instanceof MainActivity)&#123; String str = append.str1() + append.str2(); field.setAccessible(true); try &#123; field.set(object, str); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; &#125;&#125; 注解使用Demo 123456789101112131415161718@Append(str1 = "how", str2 = "are you")public String tips;@Appendpublic String names;@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Inject.inject(this); // 控制台输出：howare you helloworld Log.i("TAG", tips + " "+ names);&#125; 编译时注解实现： 编译时注解通过注解处理器实现。注解处理器是（Annotation Processor）是javac的一个工具，用来在编译时扫描和编译和处理注解（Annotation）。 注解处理器以Java代码或者（编译过的字节码）作为输入，生成文件（通常是java文件）。这些生成的java文件不能修改，并且会同其手动编写的java代码一样会被javac编译。 创建注解 使用 Java Module - lib_annotations，用于在编译时，生成XXX_SUFFIX.java 文件，代码如下： 12345678910111213package com.pa.test.lib_annotations;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Retention(RetentionPolicy.RUNTIME)@Target(value = ElementType.FIELD)public @interface EAppend &#123; String str1() default "hello"; String str2() default "world";&#125; 创建注解解析器 使用 Java Module - lib_compiler, 依赖上面 Module，代码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package com.pa.test.lib_compiler;import com.pa.test.lib_annotations.EAppend;import javax.lang.model.element.Element;import javax.lang.model.element.Name;import javax.lang.model.element.TypeElement;import javax.lang.model.type.TypeMirror;import javax.lang.model.util.Elements;// public class AnnotatedClass &#123; private final String value1; private final String value2; public Element mClassElement; /** * 元素相关的辅助类 */ public Elements mElementUtils; public TypeMirror elementType; public Name elementName; public AnnotatedClass(Element classElement) &#123; this.mClassElement = classElement; this.elementType = classElement.asType(); this.elementName = classElement.getSimpleName(); value1 = mClassElement.getAnnotation(EAppend.class).str1(); value2 = mClassElement.getAnnotation(EAppend.class).str2(); &#125; Name getElementName() &#123; return elementName; &#125; TypeMirror getElementType()&#123; return elementType; &#125; String getTotal()&#123; return "\""+ (value1 + value2) + "\""; &#125; /** * 包名 */ public String getPackageName(TypeElement type) &#123; return mElementUtils.getPackageOf(type).getQualifiedName().toString(); &#125; /** * 类名 */ private static String getClassName(TypeElement type, String packageName) &#123; int packageLen = packageName.length() + 1; return type.getQualifiedName().toString().substring(packageLen).replace('.', '$'); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152package com.pa.test.lib_compiler;import com.google.auto.service.AutoService;import com.pa.test.lib_annotations.EAppend;import com.squareup.javapoet.JavaFile;import com.squareup.javapoet.MethodSpec;import com.squareup.javapoet.TypeName;import com.squareup.javapoet.TypeSpec;import java.io.IOException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.LinkedHashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.processing.AbstractProcessor;import javax.annotation.processing.Filer;import javax.annotation.processing.Messager;import javax.annotation.processing.ProcessingEnvironment;import javax.annotation.processing.Processor;import javax.annotation.processing.RoundEnvironment;import javax.lang.model.SourceVersion;import javax.lang.model.element.Element;import javax.lang.model.element.ElementKind;import javax.lang.model.element.Modifier;import javax.lang.model.element.TypeElement;import javax.lang.model.util.Elements;import javax.lang.model.util.Types;import javax.tools.Diagnostic;@AutoService(Processor.class)public class EAppendProcessor extends AbstractProcessor &#123; private static final String EAPPEND_SUFFIX = "_EAppend"; private static final String TARGET_STATEMENT_FORMAT = "target.%1$s = %2$s"; private static final String CONST_PARAM_TARGET_NAME = "target"; private static final char CHAR_DOT = '.'; private Messager messager; private Types typesUtil; private Elements elementsUtil; private Filer filer; /** * 解析的目标注解集合，一个类里可以包含多个注解，所以是Map&lt;String, List&lt;AnnotatedClass&gt;&gt; */ Map&lt;String, List&lt;AnnotatedClass&gt;&gt; annotatedElementMap = new LinkedHashMap&lt;&gt;(); @Override public synchronized void init(ProcessingEnvironment processingEnvironment) &#123; super.init(processingEnvironment); messager = processingEnv.getMessager(); typesUtil = processingEnv.getTypeUtils(); filer = processingEnv.getFiler(); elementsUtil = processingEnv.getElementUtils(); &#125; @Override public SourceVersion getSupportedSourceVersion() &#123; return SourceVersion.latestSupported(); &#125; @Override public Set&lt;String&gt; getSupportedAnnotationTypes() &#123; Set&lt;String&gt; annotataions = new LinkedHashSet&lt;String&gt;(); annotataions.add(EAppend.class.getCanonicalName()); return annotataions; &#125; @Override public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123; // 因为该方法可能会执行多次，所以每次进来必须clear annotatedElementMap.clear(); //1.遍历每个有Add注解的Element， //2.然后把它加入Map里面,一个类里可以包含多个注解，所以是Map&lt;String, List&lt;AnnotatedClass&gt;&gt;， //3.赋予它工作任务，告诉他你该做什么， //4.然后生成Java文件 for (Element element : roundEnv.getElementsAnnotatedWith(EAppend.class)) &#123; //判断被注解的类型是否符合要求 if (element.getKind() != ElementKind.FIELD) &#123; messager.printMessage(Diagnostic.Kind.ERROR, "Only FIELD can be annotated with @%s"); &#125; TypeElement encloseElement = (TypeElement) element.getEnclosingElement(); String fullClassName = encloseElement.getQualifiedName().toString(); AnnotatedClass annotatedClass = new AnnotatedClass(element); //把类名和该类里面的所有关于Add注解的注解放到Map里面 if(annotatedElementMap.get(fullClassName) == null)&#123; annotatedElementMap.put(fullClassName, new ArrayList&lt;AnnotatedClass&gt;()); &#125; annotatedElementMap.get(fullClassName).add(annotatedClass); &#125; //因为该方法会执行多次，所以size=0时返回true结束 if (annotatedElementMap.size() == 0) &#123; return true; &#125; //用javapoet生成类文件 try &#123; for (Map.Entry&lt;String, List&lt;AnnotatedClass&gt;&gt; entry : annotatedElementMap.entrySet()) &#123; MethodSpec constructor = createConstructor(entry.getValue()); TypeSpec binder = createClass(getClassName(entry.getKey()), constructor); JavaFile javaFile = JavaFile.builder(getPackage(entry.getKey()), binder).build(); javaFile.writeTo(filer); &#125; &#125; catch (IOException e) &#123; messager.printMessage(Diagnostic.Kind.ERROR, "Error on creating java file"); &#125; return true; &#125; //以下是javapoet创建各种方法的实现方式 private MethodSpec createConstructor(List&lt;AnnotatedClass&gt; randomElements) &#123; AnnotatedClass firstElement = randomElements.get(0); MethodSpec.Builder builder = MethodSpec.constructorBuilder() .addModifiers(Modifier.PUBLIC) .addParameter(TypeName.get(firstElement.mClassElement.getEnclosingElement().asType()), CONST_PARAM_TARGET_NAME); for (int i = 0; i &lt; randomElements.size(); i++) &#123; addStatement(builder, randomElements.get(i)); &#125; return builder.build(); &#125; private void addStatement(MethodSpec.Builder builder, AnnotatedClass randomElement) &#123; builder.addStatement(String.format( TARGET_STATEMENT_FORMAT, randomElement.getElementName().toString(), randomElement.getTotal()) ); &#125; private TypeSpec createClass(String className, MethodSpec constructor) &#123; return TypeSpec.classBuilder(className + EAPPEND_SUFFIX) .addModifiers(Modifier.PUBLIC, Modifier.FINAL) .addMethod(constructor) .build(); &#125; private String getPackage(String qualifier) &#123; return qualifier.substring(0, qualifier.lastIndexOf(CHAR_DOT)); &#125; private String getClassName(String qualifier) &#123; return qualifier.substring(qualifier.lastIndexOf(CHAR_DOT) + 1); &#125;&#125; 123456789101112apply plugin: 'java-library'dependencies &#123; implementation fileTree(dir: 'libs', include: ['*.jar']) compile 'com.squareup:javapoet:1.9.0' compile 'com.google.auto.service:auto-service:1.0-rc4' implementation project(':lib_annotations')&#125;sourceCompatibility = "7"targetCompatibility = "7" AutoService 主要的作用是注解 processor 类，并对其生成 META-INF 的配置信息。 JavaPoet 这个库的主要作用就是帮助我们通过类调用的形式来生成代码。 参考：https://juejin.im/entry/58fefebf8d6d810058a610de 参考：https://juejin.im/post/584d4b5b0ce463005c5dc444 创建辅助模块 使用存Java Module - lib_api ，用于将类A.java 与 编译时生成的A_SUFFIX.java 关联，非必须的。也可以在 Demo中手动关联。 1234567891011121314151617181920212223242526272829303132package com.pa.test.lib_api;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;public class Utils &#123; private static final String EAppend_SUFFIX = "_EAppend"; private Utils() &#123; &#125; public static void inject(Object object) &#123; try &#123; Class bindingClass = Class.forName(object.getClass().getCanonicalName() + EAppend_SUFFIX); Constructor constructor = bindingClass.getConstructor(object.getClass()); constructor.newInstance(object); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (NoSuchMethodException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 创建demo 123456789101112131415161718192021222324252627282930 @Append(str1 = "how", str2 = "are you")public String tips; @Appendpublic String names; @EAppend(str1 = "hi ", str2 = "annotations")public String ann; @EAppendpublic String ant; @Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Inject.inject(this); // howare you helloworld Log.i("TAG", tips + " "+ names); Utils.inject(this); // hi annotations helloworld Log.i("TAG", ann + " "+ ant); &#125; 1234567891011121314151617181920212223242526272829303132apply plugin: &apos;com.android.application&apos;android &#123; compileSdkVersion 29 defaultConfig &#123; applicationId &quot;com.pa.test.test&quot; minSdkVersion 26 targetSdkVersion 29 versionCode 1 versionName &quot;1.0&quot; testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot; &#125; buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125;&#125;dependencies &#123; implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;]) implementation &apos;com.android.support:appcompat-v7:28.+&apos; implementation &apos;com.android.support.constraint:constraint-layout:1.1.3&apos; testImplementation &apos;junit:junit:4.12&apos; androidTestImplementation &apos;com.android.support.test:runner:1.0.2&apos; androidTestImplementation &apos;com.android.support.test.espresso:espresso-core:3.0.2&apos; api project(&apos;:lib_annotations&apos;) api project(&apos;:lib_api&apos;) annotationProcessor project(&apos;:lib_compiler&apos;)&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + github 搭建静态博客]]></title>
    <url>%2Fblog%2F2019%2F07%2F19%2FHexo%20%2B%20github%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo + github 搭建静态博客 注册github，创建项目; 参考文章 安装git、curl、brew、node.js等 安装hexo 相关; 参考文章 12$ npm install -g hexo-cli$ npm install hexo-deployer-git --save 初始化hexo项目 1hexo init 进入hexo 项目的根目录，获取next 主题 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 修改hexo 项目更目录下面的_config.yml文件 123456789101112title: noteauthor: lpllanguage: zh-Hansurl: https://zubao.github.io/blogroot: /blog/deploy: type: git repo: git@github.com:zubao/blog.git branch: master message: message hexo 命令介绍; hexo 文档 hexo g 生成静态文件 hexo d 发布到github hexo s 启动本地静态服务器 ls -i tcp:4000 查找端口为4000的进程 kill -9 PID 杀掉进程 hexo clean 清除缓存 next 主题文档介绍: 官方文档]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AOSP 编译文档]]></title>
    <url>%2Fblog%2F2019%2F07%2F19%2FAOSP%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[准备工作： Mac Pro 10.14版本，16G内存，256G SSD； 外接移动硬盘1T，使用自带的磁盘工具分区；A区不分大小写，用于时间机器备份电脑；B区(Mac OS扩展，区分大小写)用于AOSP项目。 参考官网配置环境 去清华镜像下载AOSP初始包；使用curl -C - -O 命令，迅雷需要会员不然下载不了。文件47.8GB，需要使用支持断点续传的工具下载。 官网下载文档 下载md5文件 验证aosp-latest.tar文件的md5值，判断是否下载完整。 1brew install md5sha1sum 验证md5 1md5sum aosp-latest.tar 将初始包下载到移动硬盘分区中，并解压： 1tar xf aosp-latest.tar 运行命令同步项目： 1repo sync 如果命令repo没有，参考清华文档 下载配置。 查看远程分支，切换分支： 查看可切换的分支 ，切换分支，并同步代码： 123456cd .repo/manifests git branch -a 切换到9.0分支repo init -b android-9.0.0_r34同步代码repo sync （可选）切换命令行运行的shell版本 123ps -p $$ // 查看当前运行的shell版本chsh -s /bin/bash // 切换到b shellchsh -s /bin/zsh // 切换到 z shell 初始化环境, 必须在bash环境运行。 12cd aospsource build/envsetup.sh (可选)查看cpu内核数，用于编译时选择线程数。我的是4核 1sysctl -n machdep.cpu.core_count 通过lunch 命令选择要编译的源码架构, 需要输入对应的序号。ps：lunch可能会花几分钟。 编译源码，x=cpu核心数*2+2。如果没有lunch，默认编译第一个。 1make -jx 清理编译产生的文件 1make clobber AOSP目录详解 解释每个目录、子目录的用途，编译宏观上理解android。 刷机文档 错误a 1internal error: could not open symlink hardware/qcom/sdm710/Android.bp 方法1：删除sdm710目录；(采用，验证可以通过这个错误) 方法2：重新解压，重新同步不同的分支。 网上说法是，遗漏了某些文件，或者是上一个分支的问题没有移除；参考 错误b 1internal error: Could not find a supported mac sdk: [&quot;10.10&quot; &quot;10.11&quot; &quot;10.12&quot; &quot;10.13&quot;] 解决方法：参考 123456789vim build/soong/cc/config/x86_darwin_host.godarwinSupportedSdkVersions = []string&#123; &quot;10.10&quot;, &quot;10.11&quot;, &quot;10.12&quot;, &quot;10.13&quot;, &quot;10.14&quot;,&#125;因为我的系统版本，xcode版本是10.14，这里也添加 10.14 添加10.14后，可能报错误 ，解决方法是下载MacOSX10.13.SDK 放到 目录： 1/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs 这里要注意的是10.13SDK网上有些版本是有bug的，部分文件的符号引用在文件夹移动之后失效。上面下载地址中github上修正了这个bug。 编译成功提示 1#### build completed successfully (05:58:17 (hh:mm:ss)) #### 运行emulator 运行模拟器。 1emulator -partition-size 3000 运行模拟器报错 1emulator: command not found 原因是 直接使用make编译的项目。 解决方法： 使用lunch 选择 aosp_x86_64-eng 重新编译，就可以正常启动模拟器。参见 使用IntelliJ 阅读源码 1、使用命令，生成android.ipr, android.iml文件 12&gt; make idegen &amp;&amp; development/tools/idegen/idegen.sh&gt; 2、修改IntelliJ 配置，扩大虚拟机使用内存，文件大小写敏感。方法：打开IntelliJ包内容，bin目录下找到 idea.vmoptions 和 idea.properties 这两个文件。具体参考：https://www.jianshu.com/p/1d1b8d0de1ed]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>AOSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java虚拟机阅读]]></title>
    <url>%2Fblog%2F2019%2F07%2F15%2FJava%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[Java 虚拟机阅读 KVM (Kilobyte VM) KVM 中的 K 是“Kilobyte”的意思，它强调简单，轻量，高度可移植，但是运行速度比较慢。在 Androd、iOS 等智能手机操作系统出现前曾经在手机平台上得到非常广泛应用。 优点：包含JVM最核心的组件；实现方式与JVM规范描述的抽象的JVM相近 缺点：是Java ME CLDC VM，而不是Java SE VM；未实现反射、浮点计算等功能。 注意：KVM(kernel-base VM) 是一款基于linux内核的虚拟机 QEMU+KVM KVM 介绍 宋宝华KVM介绍 Java 虚拟机家族考 Squawk VM Squawk VM 是由 Sun 开发，运行于 Sun SPOT（Sun Small Programmable Object Technology，一种手持的 Wifi 设备），也曾经运用于 Java Card。这是一个 Java 代码比重很高的嵌入式虚拟机实现，其中诸如类加载器、字节码验证器、垃圾收集器、解释器、编译器和线程调度都是 Java 语言本身所完成的，仅仅靠 C 语言来编写设备 I/O 和必要的本地代码。 JavaInJava JavaInJava 是 Sun 公司 1997 年～1998 年间所研发的一个实验室性质的虚拟机，从名字就可以看出，它试图以 Java 语言来实现 Java 语言本身的运行环境，既所谓的“元循环”（Meta-Circular，是指使用语言自身来实现其运行环境）。它必须运行在另外一个宿主虚拟机之上，内部没有 JIT 编译器，代码只能以解释模式执行。在上世纪末主流 Java 虚拟机都未能很好解决性能问题的时代，开发这种项目，其执行速度大家可想而知。 Maxine VM Maxine VM 和上面的 JavaInJava 非常相似，它也是一个几乎全部以 Java 代码实现（只有用于启动 JVM 的加载器使用 C 语言编写）的元循环 Java 虚拟机。这个项目于 2005 年开始，到现在仍然在发展之中，比起 JavaInJava，Maxine VM 就显得“靠谱”很多，它有先进的 JIT 编译器和垃圾收集器（但没有解释器），可在宿主模式或独立模式下执行，其执行效率已经接近了 HotSpot Client VM 的水平 JRockit VM 曾经号称“世界上速度最快的 Java 虚拟机”（广告词，貌似 J9 VM 也这样说过），它是 BEA 公司在 2002 年从 Appeal Virtual Machines 公司收购获得的虚拟机。BEA 将其发展为一款专门为服务器硬件和服务端应用场景高度优化的虚拟机，由于专注于服务端应用，它可以不太关注于程序启动速度，因此 JRockit 内部不包含解析器实现，全部代码都靠即时编译器编译后执行。除此之外，JRockit 的垃圾收集器和 MissionControl 服务套件等部分的实现，在众多 Java 虚拟机中也一直处于领先水平。 IBM J9 VM 并不是 IBM 公司唯一的 Java 虚拟机，不过是目前 IBM 主力发展的 Java 虚拟机，J9 原本是内部开发代号，正式名称是“IBM Technology for Java Virtual Machine”，简称 IT4J，只是这个名字太拗口了一点，普及程度不如 J9。J9 VM 最初是由 IBM Ottawa 实验室一个 SmallTalk 的虚拟机扩展而来的，当时这个虚拟机有一个 bug 是因为 8k 值定义错误引起，工程师们花了很长时间终于发现并解决了这个错误，此后这个版本的虚拟机就被称为 K8 了，后来扩展出支持 Java 的虚拟机就被称为 J9 了。与 BEA JRockit 专注于服务端应用不同，IBM J9 的市场定位与 Sun HotSpot 比较接近，它是一款设计上从服务端到桌面应用再到嵌入式都全面考虑的多用途虚拟机，J9 的开发目的是作为 IBM 公司各种 Java 产品的执行平台，它的主要市场在和 IBM 产品（如 IBM WebSphere 等）搭配以及在 IBM AIX 和 z/OS 这些平台上部署 Java 应用。 Apache Harmony 是一个 Apache 软件基金会旗下以 Apache License 协议开源的实际兼容于 JDK 1.5 和 JDK 1.6 的 Java 程序运行平台，这个介绍相当拗口。它包含自己的虚拟机和 Java 库，用户可以在上面运行 Eclipse、Tomcat、Maven 等常见的 Java 程序，但是……它没有通过 TCK 认证，所以我们不得不用那么一长串拗口的语言来介绍它，而不能用一句“Apache 的 JDK”来说明。如果一个公司要宣布自己的运行平台“兼容于 Java 语言”，那就必须要通过 TCK（Technology Compatibility Kit）的兼容性测试，Apache 基金会曾要求 Sun 公司提供 TCK 的使用授权，但是一直遭到拒绝，直到 Oracle 收购了 Sun 公司之后，双方关系越闹越僵，最终导致 Apache 愤然退出 JCP（Java Community Process）组织，这是近代 Java 社区最严重的一次分裂。 Dalvik VM 是 Android 平台的核心组成部分之一，它名字来源于冰岛一个名为 Dalvik 的小渔村。Dalvik VM 并不是一个 Java 虚拟机，它没有遵循 Java 虚拟机规范，不能直接执行 Java 的 class 文件，使用寄存器架构而不是 JVM 中常见的栈架构。但是它与 Java 却又有着千丝万缕的联系，它执行 dex（Dalvik Executable）文件可以通过 class 文件转化而来，使用 Java 语法编写应用程序，可以直接使用大部分的 Java API 等等。目前 Dalvik VM 随着 Android 一起处于迅猛发展阶段，在 Android 2.2 中已提供即时编译器实现，执行性能有了很大的提高。]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java JNI 调用 C 实现]]></title>
    <url>%2Fblog%2F2019%2F07%2F15%2FJava%20JNI%20%E8%B0%83%E7%94%A8%20C%20%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[Java JNI 调用 C 实现 创建目录hook 创建Test.java文件 12345678910111213141516171819 package hook; 2 public class Test&#123; 3 static&#123; 4 System.loadLibrary("test"); 5 &#125; 6 7 public native int nativeAdd(int x, int y); 8 9 public int add(int x, int y)&#123;10 return x + y;11 &#125;1213 public static void main(String[] args)&#123;14 Test test = new Test();15 System.out.println(System.getProperty("java.library.path"));16 System.out.println(test.add(3, 5));17 System.out.println(test.nativeAdd(3, 5));18 &#125;19 &#125; 编译java文件. 1javac hook/Test.java 创建 jni 头文件 1234567891011121314151617181920212223javah -jni hook.Test 1 /* DO NOT EDIT THIS FILE - it is machine generated */ 2 #include &lt;jni.h&gt; 3 /* Header for class hook_Test */ 4 5 #ifndef _Included_hook_Test 6 #define _Included_hook_Test 7 #ifdef __cplusplus 8 extern "C" &#123; 9 #endif 10 /* 11 * Class: hook_Test 12 * Method: nativeAdd 13 * Signature: (II)I 14 */ 15 JNIEXPORT jint JNICALL Java_hook_Test_nativeAdd 16 (JNIEnv *, jobject, jint, jint); 17 18 #ifdef __cplusplus 19 &#125; 20 #endif 21 #endif 编写Test.c 文件，和hook 同一级目录。 1234561 #include "hook_Test.h"23 JNIEXPORT jint JNICALL Java_hook_Test_nativeAdd4 (JNIEnv * env, jobject obj, jint x, jint y)&#123;5 return x + y ;6 &#125; 生成动态链接库，命令如下 1gcc -dynamiclib -o libtest.jnilib Test.c -framework JavaVM -I $JAVA_HOME/include -I $JAVA_HOME/include/darwin 说明： -o：指定动态链接库编译后生成的路径及文件名 -dynamiclib：表示编译成动态链接库 -framework JavaVM -I：编译JNI需要用到JVM的头文件(jni.h)，第一个目录是平台无关的，第二个目录是与操作系统平台相关的头文件 mac 上和linux上命令有少许差异，linux 上是生成so文件，mac上是生成jnilib文件 参考文件linux,[参考文件多平台]([http://blog.0613.me/2017/05/14/20170514%20-%20Java-%E9%80%9A%E8%BF%87-JNI-%E8%B0%83%E7%94%A8-so-jnilib-%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/](http://blog.0613.me/2017/05/14/20170514 - Java-通过-JNI-调用-so-jnilib-动态链接库/)) 执行验证结果 1java -Djava.library.path=. hook.Test 需要加上 -Djava.library.path=. 指明从当前目录加载动态链接库文件，否则会出现找不到库文件的异常。 查看class 文件命令 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134javap -verbose hook.TestClassfile /Users/lipeilong/note/java/vm/hook/Test.class Last modified 2019-7-15; size 747 bytes MD5 checksum 223fad605354553a14ee9dd1adaae086 Compiled from "Test.java"public class hook.Test minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPERConstant pool: #1 = Methodref #13.#26 // java/lang/Object."&lt;init&gt;":()V #2 = Class #27 // hook/Test #3 = Methodref #2.#26 // hook/Test."&lt;init&gt;":()V #4 = Fieldref #28.#29 // java/lang/System.out:Ljava/io/PrintStream; #5 = String #30 // java.library.path #6 = Methodref #28.#31 // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String; #7 = Methodref #32.#33 // java/io/PrintStream.println:(Ljava/lang/String;)V #8 = Methodref #2.#34 // hook/Test.add:(II)I #9 = Methodref #32.#35 // java/io/PrintStream.println:(I)V #10 = Methodref #2.#36 // hook/Test.nativeAdd:(II)I #11 = String #37 // test #12 = Methodref #28.#38 // java/lang/System.loadLibrary:(Ljava/lang/String;)V #13 = Class #39 // java/lang/Object #14 = Utf8 &lt;init&gt; #15 = Utf8 ()V #16 = Utf8 Code #17 = Utf8 LineNumberTable #18 = Utf8 nativeAdd #19 = Utf8 (II)I #20 = Utf8 add #21 = Utf8 main #22 = Utf8 ([Ljava/lang/String;)V #23 = Utf8 &lt;clinit&gt; #24 = Utf8 SourceFile #25 = Utf8 Test.java #26 = NameAndType #14:#15 // "&lt;init&gt;":()V #27 = Utf8 hook/Test #28 = Class #40 // java/lang/System #29 = NameAndType #41:#42 // out:Ljava/io/PrintStream; #30 = Utf8 java.library.path #31 = NameAndType #43:#44 // getProperty:(Ljava/lang/String;)Ljava/lang/String; #32 = Class #45 // java/io/PrintStream #33 = NameAndType #46:#47 // println:(Ljava/lang/String;)V #34 = NameAndType #20:#19 // add:(II)I #35 = NameAndType #46:#48 // println:(I)V #36 = NameAndType #18:#19 // nativeAdd:(II)I #37 = Utf8 test #38 = NameAndType #49:#47 // loadLibrary:(Ljava/lang/String;)V #39 = Utf8 java/lang/Object #40 = Utf8 java/lang/System #41 = Utf8 out #42 = Utf8 Ljava/io/PrintStream; #43 = Utf8 getProperty #44 = Utf8 (Ljava/lang/String;)Ljava/lang/String; #45 = Utf8 java/io/PrintStream #46 = Utf8 println #47 = Utf8 (Ljava/lang/String;)V #48 = Utf8 (I)V #49 = Utf8 loadLibrary&#123; public hook.Test(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V 4: return LineNumberTable: line 2: 0 public native int nativeAdd(int, int); descriptor: (II)I flags: ACC_PUBLIC, ACC_NATIVE public int add(int, int); descriptor: (II)I flags: ACC_PUBLIC Code: stack=2, locals=3, args_size=3 0: iload_1 1: iload_2 2: iadd 3: ireturn LineNumberTable: line 10: 0 public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=4, locals=2, args_size=1 0: new #2 // class hook/Test 3: dup 4: invokespecial #3 // Method "&lt;init&gt;":()V 7: astore_1 8: getstatic #4 // Field java/lang/System.out:Ljava/io/PrintStream; 11: ldc #5 // String java.library.path 13: invokestatic #6 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String; 16: invokevirtual #7 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 19: getstatic #4 // Field java/lang/System.out:Ljava/io/PrintStream; 22: aload_1 23: iconst_3 24: iconst_5 25: invokevirtual #8 // Method add:(II)I 28: invokevirtual #9 // Method java/io/PrintStream.println:(I)V 31: getstatic #4 // Field java/lang/System.out:Ljava/io/PrintStream; 34: aload_1 35: iconst_3 36: iconst_5 37: invokevirtual #10 // Method nativeAdd:(II)I 40: invokevirtual #9 // Method java/io/PrintStream.println:(I)V 43: return LineNumberTable: line 14: 0 line 15: 8 line 16: 19 line 17: 31 line 18: 43 static &#123;&#125;; descriptor: ()V flags: ACC_STATIC Code: stack=1, locals=0, args_size=0 0: ldc #11 // String test 2: invokestatic #12 // Method java/lang/System.loadLibrary:(Ljava/lang/String;)V 5: return LineNumberTable: line 4: 0 line 5: 5&#125;SourceFile: "Test.java"]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jni</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取设备名称]]></title>
    <url>%2Fblog%2F2019%2F06%2F28%2Fandroid%E8%AE%BE%E5%A4%87%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[获取设备名称 1234BluetoothAdapter.getDefaultAdapter().getName()静态权限：android.permission.BLUETOOTH PS：小米手机配对后可以获取真实值、努比亚需要开蓝牙才可以获取真实值。Pixel 2XL可以。 android 6.0开始。WifiInfo.getMacAddress() 方法和 BluetoothAdapter.getAddress() 方法现在会返回常量值 02:00:00:00:00:00。 android 6.0 引入运行时权限 6.0 引入低功耗模式：当用户设备未插接电源、处于静止状态且屏幕关闭时，该模式会推迟 CPU 和网络活动，从而延长电池寿命。定时短期恢复正常工作。7.0对低功耗模式进行优化，不处于静止状态也可以进入低功耗模式(例如：放在口袋)。低功耗模式第一步：关闭网络、停止同步、作业；静止一段时间进入第二步：关闭gps、闹钟，wifi扫描等。 6.0引入待机模式：一段时间不触摸手机，进入待机模式。 6.0 移除了 对 apache http支持，请使用HttpUrlConnection 6.0USB传输数据，必须显示启用 7.0 targetSDK为7.0的后台服务器不在收到网络变化的广播。所有7.0系统的手机上后台新建图片和视频的广播 7.0 tragetSDK为7.0+，开发者不能放宽私有文件访问权限，分享私有文件的方法为FileProvider 7.0 设备所有者，可以通过使用DevicePolicyManager.getWifiMacAddress访问mac地址，如果wifi没有启用过返回null 8.0 进一步限制清单注册的隐式广播 8.0 降低后台应用接收位置信息的频率 8.0 以前用户请求一权限组中的某一权限是，系统自动授予了权限组的其他权限。8.0后系统修复了这一bug，改为，请求那一具体权限，授予这一具体权限，但是下次请求这一具体权限所在权限组的其他权限是，系统默认授予，而不是提示用户。 在 Android 8.0 之前，如果应用在运行时请求权限并且被授予该权限，系统会错误地将属于同一权限组并且在清单中注册的其他权限也一起授予应用。 对于针对 Android 8.0 的应用，此行为已被纠正。系统只会授予应用明确请求的权限。然而，一旦用户为应用授予某个权限，则所有后续对该权限组中权限的请求都将被自动批准。 例如，假设某个应用在其清单中列出 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE。应用请求 READ_EXTERNAL_STORAGE，并且用户授予了该权限。如果该应用针对的是 API 级别 24 或更低级别，系统还会同时授予 WRITE_EXTERNAL_STORAGE，因为该权限也属于同一 STORAGE 权限组并且也在清单中注册过。如果该应用针对的是 Android 8.0，则系统此时仅会授予 READ_EXTERNAL_STORAGE；不过，如果该应用后来又请求 WRITE_EXTERNAL_STORAGE，则系统会立即授予该权限，而不会提示用户。 android 8.0 后 androidID，不同app、相同证书获取的ID相同；不同app、不同证书获取到的ID不同；相同APP，不同证书、卸载重装之后或者重启手机之后获取到的ID不同。 android 8.0 以后获取设备账号接口不可直接使用；需要用户授予权限GET_ACCOUNTS，然后： 123Intent googlePicker = AccountManager.newChooseAccountIntent(null, null, new String[] &#123; "com.google"&#125;, true, null, null, null, null);startActivityForResult(googlePicker, PICK_ACCOUNT_REQUEST); 8.0 Build.SERIAL 已弃用。需要知道硬件序列号的应用应改为使用新的 Build.getSerial() 函数，该函数要求具有 READ_PHONE_STATE 权限。 9.0 电源管理： Android 9 引入了一项新的电池管理功能，即应用待机群组。 应用待机群组可以基于应用最近使用时间和使用频率，帮助系统排定应用请求资源的优先级。 根据使用模式，每个应用都会归类到五个优先级群组之一中。 系统将根据应用所属的群组限制每个应用可以访问的设备资源。 五个群组按照以下特性将应用分组： 活跃 如果用户当前正在使用应用，应用将被归到“活跃”群组中，例如：应用已启动一个 Activity应用正在运行前台服务应用的同步适配器与某个前台应用使用的 content provider 关联用户在应用中点击了某个通知如果应用处于“活跃”群组，系统不会对应用的作业、报警或 FCM 消息施加任何限制。 工作集 如果应用经常运行，但当前未处于活跃状态，它将被归到“工作集”群组中。 例如，用户在大部分时间都启动的某个社交媒体应用可能就属于“工作集”群组。 如果应用被间接使用，它们也会被升级到“工作集”群组中 。如果应用处于“工作集”群组，系统会对它运行作业和触发报警的能力施加轻度限制。 如需了解详细信息，请参阅电源管理限制。 常用 如果应用会定期使用，但不是每天都必须使用，它将被归到“常用”群组中。 例如，用户在健身房运行的某个锻炼跟踪应用可能就属于“常用”群组。如果应用处于“常用”群组，系统将对它运行作业和触发报警的能力施加较强的限制，也会对高优先级 FCM 消息的数量设定限制。 如需了解详细信息，请参阅电源管理限制。 极少使用 如果应用不经常使用，那么它属于“极少使用”群组。 例如，用户仅在入住酒店期间运行的酒店应用就可能属于“极少使用”群组。 如果应用处于“极少使用”群组，系统将对它运行作业、触发警报和接收高优先级 FCM 消息的能力施加严格限制。系统还会限制应用连接到网络的能力。 如需了解详细信息，请参阅电源管理限制。 从未使用 安装但是从未运行过的应用会被归到“从未使用”群组中。 系统会对这些应用施加极强的限制。 系统会动态地将每个应用归类到某个优先级群组，并根据需要重新归类。 系统可能会依靠某个使用机器学习的预加载应用确定每个应用的使用可能性，并将应用归类到合适的群组。 如果设备上不存在系统应用，系统默认将基于应用的最近使用时间对它们进行排序。 更为活跃的应用将被归类到为应用提供更高优先级的群组，从而让应用可以使用更多系统资源。 具体而言，群组决定应用运行作业的频率，应用可以触发报警的频率，以及应用可以接收高优先级 Firebase 云信息传递 (FCM) 消息的频率。 这些限制仅在设备使用电池电量时适用，如果设备正在充电，系统不会对应用施加这些限制。 每个制造商都可以设定自己的标准来归类非活跃应用。 您不应当尝试影响应用所属的群组。 相反，您应当将精力放在确保应用在所属的群组内良好运行上。 您的应用可以通过调用新函数 UsageStatsManager.getAppStandbyBucket() 查找当前属于哪个群组。 注：位于 低电耗模式白名单中的应用不适用基于应用待机群组的限制。 9.0 省电模式： Android 9 对省电模式进行了多处改进。 设备制造商可以决定施加的确切限制。 例如，在 AOSP 构建中，系统会应用以下限制： 系统会更积极地将应用置于应用待机模式，而不是等待应用空闲。 后台执行限制适用于所有应用，无论它们的目标 API 级别如何。 当屏幕关闭时，位置服务可能会被停用。 后台应用没有网络访问权限。 9.0 限制后台对传感器的访问 Android 9 限制后台应用访问用户输入和传感器数据的能力。 如果您的应用在运行 Android 9 设备的后台运行，系统将对您的应用采取以下限制： 您的应用不能访问麦克风或摄像头。 使用连续报告模式的传感器（例如加速度计和陀螺仪）不会接收事件。 使用变化或一次性报告模式的传感器不会接收事件。 如果您的应用需要在运行 Android 9 的设备上检测传感器事件，请使用前台服务。 9.0 限制 访问通话记录 Android 9 引入 CALL_LOG 权限组并将 READ_CALL_LOG、WRITE_CALL_LOG 和 PROCESS_OUTGOING_CALLS 权限移入该组。 在之前的 Android 版本中，这些权限位于 PHONE 权限组。 对于需要访问通话敏感信息（如读取通话记录和识别电话号码）的应用，该 CALL_LOG 权限组为用户提供了更好的控制和可见性。 如果您的应用需要访问通话记录或者需要处理去电，则您必须向 CALL_LOG 权限组明确请求这些权限。 否则会发生 SecurityException。 9.0 限制访问电话号码 在未首先获得 READ_CALL_LOG 权限的情况下，除了应用的用例需要的其他权限之外，运行于 Android 9 上的应用无法读取电话号码或手机状态。 与来电和去电关联的电话号码可在手机状态广播（比如来电和去电的手机状态广播）中看到，并可通过 PhoneStateListener 类访问。 但是，如果没有 READ_CALL_LOG 权限，则 PHONE_STATE_CHANGED 广播和 PhoneStateListener 提供的电话号码字段为空。 要从手机状态中读取电话号码，请根据您的用例更新应用以请求必要的权限： 要通过 PHONE_STATE Intent 操作读取电话号码，同时需要 READ_CALL_LOG 权限和 READ_PHONE_STATE 权限。 要从 onCallStateChanged() 中读取电话号码，只需要 READ_CALL_LOG 权限。 不需要 READ_PHONE_STATE 权限。 9.0 限制访问wifi位置和连接信息。简单说，9.0以前扫描wifi只需要2个权限，并且前台扫描无限制，后台扫描每个APP30分钟可以扫描一次；9.0以后，除了权限还需要开启位置服务，前台2分钟扫描4次，后台所有app30分钟扫描一次。 在 Android 9 中，应用进行 Wi-Fi 扫描的权限要求比之前的版本更严格。 详情请参阅 Wi-Fi 扫描限制。 类似的限制也适用于 getConnectionInfo() 函数，该函数返回描述当前 Wi-Fi 连接的 WifiInfo 对象。 如果调用应用具有以下权限，则只能使用该对象的函数来检索 SSID 和 BSSID 值： ACCESS_FINE_LOCATION 或 ACCESS_COARSE_LOCATION ACCESS_WIFI_STATE 检索 SSID 或 BSSID 还需要在设备上启用位置服务（在 Settings &gt; Location 下）。 9.0 wifi服务中移出了部分信息 在 Android 9 中，下列事件和广播不接收用户位置或个人可识别数据方面的信息： WifiManager 中的 getScanResults() 和 getConnectionInfo() 函数。 WifiP2pManager 中的 [discoverServices()](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html?hl=zh-cn#discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)) 和 [addServiceRequest()](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html?hl=zh-cn#addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)) 函数。 NETWORK_STATE_CHANGED_ACTION 广播。 Wi-Fi 的 NETWORK_STATE_CHANGED_ACTION系统广播不再包含 SSID（之前为 EXTRA_SSID）、BSSID（之前为 EXTRA_BSSID）或连接信息（之前为 EXTRA_NETWORK_INFO）。 如果应用需要此信息，请改为调用getConnectionInfo()。 9.0 电话信息现在依赖设备位置设置 getAllCellInfo() [listen()](https://developer.android.com/reference/android/telephony/TelephonyManager.html?hl=zh-cn#listen(android.telephony.PhoneStateListener, int)) getCellLocation() getNeighboringCellInfo() 9.0 加密程序变更 https://www.jianshu.com/p/2b22daa8e2f6 Q 目标api 23以下的app会受到警告 在 Android Q 中，当用户首次运行以 Android 6.0（API 级别 23）以下的版本为目标平台的任何应用时，Android 平台会向用户发出警告。如果此应用要求用户授予权限，则系统会先向用户提供调整应用权限的机会，然后才会允许此应用首次运行。 Q 撤消了 /proc/net 访问权限 Q 开始，应用必须具有 READ_PRIVILEGED_PHONE_STATE 特许权限才能访问设备的不可重置标识符（包含 IMEI 和序列号）。 如果应用以 Android Q 为目标平台，则会发生 SecurityException。 如果应用以 Android 9（API 级别 28）或更低版本为目标平台，则相应方法会返回 null 或占位符数据（如果应用具有 READ_PHONE_STATE 权限）。否则，会发生 SecurityException。 Q 后台APP不可访问剪切板 Q 无法启用、停用 WIFI；如果必须，使用设置面板 Q telephony API、WLAN API 和 Bluetooth API 需要精确位置权限]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
</search>
