<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac PHP + Redis]]></title>
    <url>%2Fblog%2F2019%2F08%2F26%2FMac%20PHP%20%2B%20Redis%2F</url>
    <content type="text"><![CDATA[首先需要安装Redis、PHP、PHP-FPM、nginx PHP需要安装Redis的扩展 1234567# https://github.com/phpredis/phpredis/releases 下载最新的 phpredis# 将下载安装包解压到 /usr/local # 将目录名称重命名为 phprediscd phpredissudo phpize # php安装后的路径sudo ./configure --with-php-config=/usr/local/php/bin/php-configsudo make &amp;&amp; make install 执行 sudo phpsize 的时候会报错 1234567891011grep: /usr/include/php/main/php.h: No such file or directorygrep: /usr/include/php/Zend/zend_modules.h: No such file or directorygrep: /usr/include/php/Zend/zend_extensions.h: No such file or directoryConfiguring for:PHP Api Version: Zend Module Api No: Zend Extension Api No: # 解决方法是：sudo ln -s/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/ /usr/include 修改php.ini文件，启用phpredis扩展 123456# 初次安装可能没有php.ini,需要自己copy一份sudo cp php.ini.default php.ini# 打开 php.ini 添加扩展sudo vim php.iniextension_dir = "/usr/lib/php/extensions/no-debug-non-zts-20160303"extension=redis.so 重启Nginx PHP-FPM 123sudo nginx -s reload# /usr/local/var/run/php-fmp.pid 文件中有对应的PIDsudo kill -USR2 php-fpm.pid Redis Demo 编写 1234567$redis = new Redis();// ps aux | grep redis 默认端口是6379 可以退通过命令查询到$redis-&gt;connect("127.0.0.1", "6379");echo "&lt;h5&gt;".($redis-&gt;get("foo"))."&lt;/h5&gt;";$redis-&gt;set("date", date('Y-m-d H:i:s'));echo "&lt;h5&gt;".($redis-&gt;get("date"))."&lt;/h5&gt;"; 参考文章 http://www.runoob.com/redis/redis-php.html https://segmentfault.com/q/1010000003882420]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手机大厂官方文档地址]]></title>
    <url>%2Fblog%2F2019%2F08%2F23%2F%E5%9B%BD%E5%86%85%E6%89%8B%E6%9C%BA%E5%A4%A7%E5%8E%82%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[华为 https://developer.huawei.com/consumer/cn/devservice/doc/50127 小米 https://dev.mi.com/console/doc/detail?pId=1351 OPPO https://open.oppomobile.com/wiki/doc#id=10432 VIVO https://dev.vivo.com.cn/documentCenter/doc/235]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac Nginx + PHP 环境搭建]]></title>
    <url>%2Fblog%2F2019%2F08%2F22%2FMac%20Nginx%20%2B%20PHP%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装Nginx 1brew install nginx 12345678910#测试nginx配置是否有语法错误nginx -t#打开 nginxsudo nginx#重新加载配置|重启|停止|退出 nginxnginx -s reload|reopen|stop|quit#也可以使用Mac的launchctl来启动|停止 nginxlaunchctl unload ~/Library/LaunchAgents/homebrew.mxcl.nginx.plistlaunchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist# 浏览器打开 http://127.0.0.1:8080/ 验证ng是否正常启动 配置NG 配置nginx,让它监听php-fpm的进程，这样当用户打开浏览器访问的时候，身为反向代理的nignx就能把东西让php去执行了。我们要配置nginx.conf文件，创建一个php-fpm文件（监听php-fpm）, 还要约定下将nginx.pid文件，log日志，以及以后我们要配置的站点.conf的路径，我们的路径约定还是按照brew默认的目录来设置,如下： 1234567891011121314151617# nginx.conf,已经被创建好了，我们一会要更改下/usr/local/etc/nginx/nginx.conf# php-fpm,这个我们就放在和nginx.conf一样的路径下吧，这个要我们自己创建/usr/local/etc/nginx/php-fpm# 日志文件放在/usr/local/var/log/nginx中，默认已经有了access.log和error.log文件了/usr/local/var/log/nginx/# nginx.pid文件,放在/usr/local/var/run/下面，和php-fpm.pid放一堆/usr/local/var/run/# 以后要配置的站点.conf, 我们就放在/usr/local/etc/nginx/servers/下面，这个servers文件夹本身就存在的/usr/local/etc/nginx/servers/# 站点的根目录,也就用brew给我们设置的吧/usr/local/var/www/ 配置 vim /usr/local/etc/nginx/nginx.conf 1234567891011121314151617181920212223242526worker_processes 1;error_log /usr/local/var/log/nginx/error.log debug;# 指定pidpid /usr/local/var/run/nginx.pid;events &#123; worker_connections 256;&#125;http &#123; include mime.types; default_type application/octet-stream; # 这个必须在前面 log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"'; # main 指的是上面的 main access_log /usr/local/var/log/nginx/access.log main; sendfile on; keepalive_timeout 65; port_in_redirect off; include /usr/local/etc/nginx/servers/*;&#125; 配置php-fpm 需要自己创建 vim /usr/local/etc/nginx/php-fpm 12345678location ~ \.php$ &#123; try_files $uri = 404; # 端口号默认是9000，如果被占用可以修改 fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_intercept_errors on; include /usr/local/etc/nginx/fastcgi.conf; &#125; 新建配置php站点服务自己的配置文件 vim /usr/local/etc/nginx/services/php-demo.conf 123456789101112131415161718192021222324252627server &#123; listen 80; server_name www.xxx.com; # 指定php工程地址 root /usr/local/var/www/demo; access_log /usr/local/var/log/nginx/default.access.log main; location / &#123; try_files $uri $uri/ /index.php?$query_string; index index.html index.htm index.php; autoindex on; include /usr/local/etc/nginx/php-fpm; &#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 location ~ \.php$ &#123; try_files $uri = 404; # 端口号，被占用可以修改 fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; error_page 404 /404.html; error_page 403 /403.html;&#125; 重启nginx 1sudo nginx -s reload 安装Postgre 数据库 下载CI框架 第一个nginx + PHP + PostgreSQL demo 12345678910111213141516171819202122// 创建数据库的部分自己手动在命令行做了$dsn = "pgsql:port=5432;host=127.0.0.1;dbname=nosql";$username = "jack";$password = "123456";try &#123; $pdo = new PDO($dsn, $username, $password); if(!$pdo)&#123; echo "&lt;h5&gt;PG:PDO连接失败&lt;/h5&gt;"; &#125;else&#123; echo "&lt;h5&gt;PG:PDO连接成功&lt;/h5&gt;"; &#125;&#125;catch(Exception $e)&#123; print_r($e-&gt;getMessage());&#125;// 插入数据库字段需要用单引号$sql = "select * from user_tbl;";$result = $pdo-&gt;query($sql);foreach($result as $row) &#123; print_r($row['name']); print_r($row['signup_date']);&#125; 参考文章 https://cloud.tencent.com/developer/article/1335520]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 自带PHP 启动]]></title>
    <url>%2Fblog%2F2019%2F08%2F22%2FMac%20PHP%20%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[Mac 自带 php-fpm，在终端执行 php-fpm，会报如下错误： 123ERROR: failed to open configuration file '/private/etc/php-fpm.conf': No such file or directory (2)ERROR: failed to load configuration file '/private/etc/php-fpm.conf'ERROR: FPM initialization failed 错误信息显示，不能打开配置文件，cd /private/etc，发现没有 php-fpm.conf 文件，但是有 php-fpm.conf.default 文件。这个文件是默认配置，我们可以复制一份，改名为 php-fpm.conf，然后再根据需要改动配置。 1sudo cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf 执行 php-fpm，再次报错： 1234[22-Aug-2019 16:50:55] WARNING: Nothing matches the include pattern '/private/etc/php-fpm.d/*.conf' from /private/etc/php-fpm.conf at line 125.[22-Aug-2019 16:50:55] ERROR: failed to open error_log (/usr/var/log/php-fpm.log): No such file or directory (2)[22-Aug-2019 16:50:55] ERROR: failed to post process the configuration[22-Aug-2019 16:50:55] ERROR: FPM initialization failed 错误信息显示，不能打开错误日志文件。cd /usr/var/log 发现根本没有这个目录，甚至连 var 目录都没有，加上为了避免权限问题，干脆配置到 /usr/local/var/log 目录。 123sudo vim php-fpm.conf# 记得将前面的';'去掉error_log = /usr/local/var/log/php-fpm.log 执行 php-fpm，再次报错： 1234[22-Aug-2019 16:54:36] WARNING: Nothing matches the include pattern &apos;/private/etc/php-fpm.d/*.conf&apos; from /private/etc/php-fpm.conf at line 125.[22-Aug-2019 16:54:36] ERROR: No pool defined. at least one pool section must be specified in config file[22-Aug-2019 16:54:36] ERROR: failed to post process the configuration[22-Aug-2019 16:54:36] ERROR: FPM initialization failed 解决方法是： 进入PHP安装目录/etc/php-fpm.d 1sudo cp www.conf.default www.conf 执行 php-fpm，再次报错： 12[22-Aug-2019 16:58:23] NOTICE: [pool www] 'user' directive is ignored when FPM is not running as root[22-Aug-2019 16:58:23] NOTICE: [pool www] 'group' directive is ignored when FPM is not running as root 12# 解决方法sudo php-fpm 执行 sudo php-fpm，再次报错： 12345No log handling enabled - using stderr loggingCreated directory: /var/db/net-snmpCreated directory: /var/db/net-snmp/mib_indexes[22-Aug-2019 16:58:54] ERROR: unable to bind listening socket for address '127.0.0.1:9000': Address already in use (48)[22-Aug-2019 16:58:54] ERROR: FPM initialization failed 1234# 问题的原因是端口被占用，换一个端口就可以了。# 解决方法cd /etc/php-fpm.d/www.conflisten = 127.0.0.1:9999 执行 sudo php-fpm，再次报错： 12[23-Aug-2019 10:27:21] ERROR: Unable to create the PID file (/usr/var/run/php-fpm.pid).: No such file or directory (2)[23-Aug-2019 10:27:21] ERROR: FPM initialization failed 12# 原因是php-fpm.conf 文件中配置的 PID 路径没有权限；修复方法如下pid = /usr/local/var/run/php-fpm.pid PHP-FPM 重启方法 1234567891011# 启动sudo php-fpm# 终止 php-fpm.pid 需要在 php-fpm.conf中配置sudo kill -INT 'cat /usr/local/var/run/php-fpm.pid'# 重启sudo kill -USR2 'cat /usr/local/var/run/php-fpm.pid'# 平滑终止sudo kill -QUIT 'cat /usr/local/var/run/php-fpm.pid'# 如果没有php-fpm.pid 文件ps aux | grep phpsudo kill -INT|USR2 pid 参考文章 https://blog.csdn.net/zrainload/article/details/78962062 https://blog.csdn.net/gb4215287/article/details/75247335]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hive 简介]]></title>
    <url>%2Fblog%2F2019%2F08%2F22%2FHive%20%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Hive简介 Apache Hive起初由Facebook开发 Apache Hive是一个建立在Hadoop架构之上的数据仓库。 可以将结构化的数据文件映射为一张数据库表 Hive 定义了简单的类 SQL 查询语言，称为 HQL，它允许熟悉 SQL 的用户查询数据。 底层数据是存储在 HDFS (Hadoop Distributed File System)上 Hive的本质是将 SQL 语句转换为 MapReduce 任务运行 使不熟悉 MapReduce 的用户很方便地利用 HQL 处理和计算 HDFS 上的结构化的数据。 Hive优缺点： 直接使用 MapReduce 所面临的问题： 1、人员学习成本太高 2、项目周期要求太短 3、MapReduce实现复杂查询逻辑开发难度太大 为什么要使用 Hive： 1、更友好的接口：操作接口采用类 SQL 的语法，提供快速开发的能力 2、更低的学习成本：避免了写 MapReduce，减少开发人员的学习成本 3、更好的扩展性：可自由扩展集群规模而无需重启服务，还支持用户自定义函数 Hive的特点 优点： 1、可扩展性,横向扩展，Hive 可以自由的扩展集群的规模，一般情况下不需要重启服务 横向扩展：通过分担压力的方式扩展集群的规模 纵向扩展：一台服务器cpu i7-6700k 4核心8线程，8核心16线程，内存64G =&gt; 128G 2、延展性，Hive 支持自定义函数，用户可以根据自己的需求来实现自己的函数 3、良好的容错性，可以保障即使有节点出现问题，SQL 语句仍可完成执行 缺点： 1、Hive 不支持记录级别的增删改操作，但是用户可以通过查询生成新表或者将查询结 果导入到文件中（当前选择的 hive-2.3.2 的版本支持记录级别的插入操作） 2、Hive 的查询延时很严重，因为 MapReduce Job 的启动过程消耗很长时间，所以不能 用在交互查询系统中。 3、Hive 不支持事务（因为不没有增删改，所以主要用来做 OLAP（联机分析处理），而 不是 OLTP（联机事务处理），这就是数据处理的两大级别）。 Hive的用户接口 CLI，Shell 终端命令行（Command Line Interface），采用交互形式使用 Hive 命令行与 Hive 进行交互，最常用（学习，调试，生产） JDBC/ODBC，是 Hive 的基于 JDBC 操作提供的客户端，用户（开发员，运维人员）通过 这连接至 Hive server 服务 Web UI，通过浏览器访问 Hive Hive的跨语言服务 Thrift 是 Facebook 开发的一个软件框架，可以用来进行可扩展且跨语言的服务的开发， Hive 集成了该服务，能让不同的编程语言调用 Hive 的接口 底层驱动 Driver 组件完成 HQL 查询语句从词法分析，语法分析，编译，优化，以及生成逻辑执行 计划的生成。生成的逻辑执行计划存储在 HDFS 中，并随后由 MapReduce 调用执行 Hive 的核心是驱动引擎， 驱动引擎由四部分组成： (1) 解释器：解释器的作用是将 HiveSQL 语句转换为抽象语法树（AST） (2) 编译器：编译器是将语法树编译为逻辑执行计划 (3) 优化器：优化器是对逻辑执行计划进行优化 (4) 执行器：执行器是调用底层的运行框架执行逻辑执行计划 数据库存储系统 元数据，通俗的讲，就是存储在 Hive 中的数据的描述信息。 Hive 中的元数据通常包括：表的名字，表的列和分区及其属性，表的属性（内部表和 外部表），表的数据所在目录 Metastore 默认存在自带的 Derby 数据库中。缺点就是不适合多用户操作，并且数据存 储目录不固定。数据库跟着 Hive 走，极度不方便管理 解决方案：通常存我们自己创建的 MySQL 库（本地 或 远程） Hive 和 MySQL 之间通过 MetaStore 服务交互 执行流程 HiveQL 通过命令行或者客户端提交，经过 Compiler 编译器，运用 MetaStore 中的元数 据进行类型检测和语法分析，生成一个逻辑方案(Logical Plan)，然后通过的优化处理，产生 一个 MapReduce 任务。 参考文章 https://www.cnblogs.com/qingyunzong/p/8707885.html https://www.cnblogs.com/qingyunzong/category/1191578.html]]></content>
      <categories>
        <category>hive</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CI架构]]></title>
    <url>%2Fblog%2F2019%2F08%2F22%2FCI%E6%9E%B6%E6%9E%84%2F</url>
    <content type="text"><![CDATA[CI架构简介 CI架构全拼Codeigniter，相比之下另外一个更加活跃的PHP架构是Laravel。 CodeIgniter 是一套给 PHP 网站开发者使用的应用程序开发框架和工具包。它的特点包括且不局限于： 小巧但性能出色 广泛兼容各种 PHP 版本 几乎零配置且不需使用命令行 CI下载 https://www.codeigniter.com/ index.php 是所有 CI 程序的入口 设置.htaccess 文件 打开.htaccess 文件并添加以下四行代码，保存并退出 12&gt; `RewriteEngine on``RewriteCond %&#123;REQUEST_FILENAME&#125; !-f``RewriteCond %&#123;REQUEST_FILENAME&#125; !-d``RewriteRule ^(.*)$ /index.php/$1 [L]`&gt; 让我们看一下上面每行代码的作用： RewriteEngine on 用于打开 Apache 的 URL 重写 RewriteCond %{REQUEST_FILENAME} !-f 代表如果请求的文件存在，则直接访问该文件；如果文件不存在，则进行至下一步 RewriteCond %{REQUEST_FILENAME} !-d 代表如果目录存在则直接访问目录；如果目录不存在，则进行至下一步 RewriteRule ^(.*)$ /index.php/$1 [L] 如果所请求的路径不是存在的文件也不是存在的目录，则在路径前追加/index.php/ 这样，我们在访问任何 CI 的 URL 时，就不需要指定任何 php 路径了。因为 index.php 是所有 CI 程序的入口。 定义路由 对于URL Home - http://abc.om/en 当 CI 接收到一个用户请求的 URL 时，首先去路由表中查询该 URL 对应的控制器。我们首先为 Home 定义一个路由。路由文件的位置是 config/routes.php。打开路由定义，添加如下代码： $route[‘en’] = ‘en/home’; 控制器与视图入门 控制器 12345678910111213141516171819202122232425清单 1.controllelrs/en/home.php&lt;?php class Home extends CI_Controller &#123; //Home 控制器的构造函数 public function __construct() &#123; parent::__construct(); &#125; //Home 控制器的默认入口 index()方法 public function index() &#123; //加载 views 目录下的/en/header.php 视图 $this-&gt;load-&gt;view('/en/header'); //加载 views 目录下的/en/home.php 视图 $this-&gt;load-&gt;view('/en/home'); //加载 views 目录下的/en/footer.php 视图 $this-&gt;load-&gt;view('/en/footer'); &#125; &#125; 在 controllers 目录下，创建目录 en，在 en 目录下创建 home.php，这将是我们的第一个控制器。在 home.php 中添加如下代码： 视图 12345678清单 2.views/en/header.php&lt;H1&gt;ABC.com - Header&lt;/H1&gt;清单 3.views/en/home.php&lt;H2&gt;Welcome to ABC.com! - Body&lt;/H2&gt;清单 4.views/en/footer.php&lt;H3&gt;Copyright - Footer&lt;/H3&gt; 控制器如视图进阶 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051清单 5.controllers/en/home.php&lt;?php class Home extends CI_Controller &#123; //定义 Header 数据数组$headerdataprotected $headerdata = array( //定义页面标题数据 'title' =&gt; 'ABC - Home', //定义页面导航栏数据 'nav' =&gt; array( 'Home' =&gt; array( 'url' =&gt; '/en', 'active' =&gt; TRUE ), 'Solutions' =&gt; array( 'url' =&gt; '/en/solutions', 'active' =&gt; FALSE ), 'Services' =&gt; array( 'url' =&gt; '/en/services', 'active' =&gt; FALSE ), 'Products' =&gt; array( 'url' =&gt; '/en/products', 'active' =&gt; FALSE ), 'Support' =&gt; array( 'url' =&gt; '/en/support', 'active' =&gt; FALSE ) ),);//Home 控制器的构造函数public function __construct() &#123;parent::__construct();&#125;//Home 控制器的默认入口 index()方法public function index() &#123; //加载 views 目录下的/en/header.php 视图并将$headerdata 中的导航栏数据传递给 header 视图$this-&gt;load-&gt;view('/en/header', $this-&gt;headerdata); //加载 views 目录下的/en/home.php 视图$this-&gt;load-&gt;view('/en/home');//加载 views 目录下的/en/footer.php 视图$this-&gt;load-&gt;view('/en/footer');&#125;&#125; 这段代码介绍了如何将数据从控制器传入视图。 视图 12345678910111213141516171819202122232425清单 6.views/en/header.php&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;?php echo $title ?&gt;&lt;/title&gt; &lt;/head&gt;&lt;body&gt;&lt;?php //遍历$nav 数组 foreach ($nav as $name =&gt; $value) &#123; //如果当前元素为’active’状态，则显示(Active) if ($value['active']) &#123; echo "$name(Active)"; &#125; else &#123; //如果当前元素为非’active’状态，则显示该页面名称，并附有该页面的链接 echo '&lt;a href="' . $value['url'] . '"&gt;'; echo $name; echo '&lt;/a&gt;'; &#125; echo ' | '; &#125;?&gt;&lt;/body&gt; 我们在 home 控制器中将$headerdata 传递给 header 视图，header 视图就可以直接访问$headerdata 的内部数据，无需指定数组名称。我们可以在 header.php 中，直接使用$title 来访问 home.php 中的$headerdata[‘title’]；同样我们可以在 header.php 中，直接使用$nav 来访问 home.php 中的$headerdata[‘nav’]。 URI 传参及模型-控制器-视图 - 完整流程 URI 解析 根据CI 的 URI 路由特性，我们采用下面的 URL 来显示 products 的 issue001 页面 http://abc.com/en/support/products/issue001 此 URL 的定义如下 第一段 abc.com 代表域名 第二段 en 代表控制器的目录 第三段 support 代表控制器的名称 第四段 products 代表控制器的函数名 第五段 issue001 代表传递给控制器的参数 控制器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172清单 7.controllers/en/support.php&lt;?phpclass Support extends CI_Controller &#123; //为 Support 控制器定义 Header 数据protected $headerdata = array( //定义 Support 页面标题 'title' =&gt; 'ABC - Support', //定义 Support 页面导航栏 'nav' =&gt; array( 'Home' =&gt; array( 'url' =&gt; '/en', 'active' =&gt; FALSE ), 'Solutions' =&gt; array( 'url' =&gt; '/en/solutions', 'active' =&gt; FALSE ), 'Services' =&gt; array( 'url' =&gt; '/en/services', 'active' =&gt; FALSE ), 'Products' =&gt; array( 'url' =&gt; '/en/products', 'active' =&gt; FALSE ), 'Support' =&gt; array( 'url' =&gt; '/en/support', 'active' =&gt; TRUE ) ),);//定义 Support 页面的数据元素protected $supportdata = array( 'type' =&gt; '', 'issue' =&gt; '', 'info' =&gt; '');//Home 控制器的构造函数public function __construct() &#123; //构造函数 parent::__construct(); //加载 Support 的数据模型 $this-&gt;load-&gt;model("support_model");&#125; //Support 控制器的默认入口public function index() &#123; //加载 header 视图并将 header 数据传递给视图 $this-&gt;load-&gt;view('/en/header', $this-&gt;headerdata); //加载 footer 视图 $this-&gt;load-&gt;view('/en/footer');&#125; //Support 控制器的 products 入口public function products($issue) &#123; //定义 support 的数据为 Products 类型，存入$supportdata $this-&gt;supportdata['type'] = 'Products'; //将 URL 传过来的$issue 参数存入$supportdata $this-&gt;supportdata['issue'] = $issue; //从 Support 模型中取出$issue 数据并存入$supportdata $this-&gt;supportdata['info'] = $this-&gt;support_model-&gt;get_product($issue); //加载 header 视图并将 header 数据传递给视图 $this-&gt;load-&gt;view('/en/header', $this-&gt;headerdata); //加载 support 视图并将 supportdata 数据传递给视图 $this-&gt;load-&gt;view('/en/support', $this-&gt;supportdata); //加载 footer 视图 $this-&gt;load-&gt;view('/en/footer');&#125;&#125; 模型 123456789101112131415清单 8.models/support_model.php&lt;?phpclass Support_model extends CI_Model &#123; //Support 模型的构造函数 public function __construct() &#123; parent::__construct(); &#125; //Support 模型的 get_product 方法，用于返回$issue 所代表的数据 public function get_product($issue) &#123; //返回$issue 的 support 信息 return "This is the support information for $issue"; &#125;&#125; 视图 1234567清单 9.views/en/support.php&lt;H2&gt;Support - Body&lt;/H2&gt;&lt;?phpecho "Type: $type&lt;br&gt;";echo "Issue: $issue&lt;br&gt;";echo "Information: $info&lt;br&gt;"; 参考文档 https://www.ibm.com/developerworks/cn/web/1508_lizhi_phpci/index.html]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>ci</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PG数据库 简介]]></title>
    <url>%2Fblog%2F2019%2F08%2F21%2FPG%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[简介 PG 数据库全称 PostgreSQL 自由的对象-关系型数据库服务器（数据库管理系统），在BSD许可证下发行。 历史 该项目最初开始于在加利福尼亚大学伯克利分校的Ingres计划。 1982年这个计划的领导者迈克尔·斯通布雷克离开加利福尼亚大学伯克利分校去推进Ingres的商业化，但最后还是返回了学术界。 1985年返回伯克利之后，斯通布雷克开始了post-Ingres计划，致力于解决在1980年代早期所出现一些数据库系统存在的问题。Postgres和Ingres的代码库开始（并保持）完全分离。 从1986年开始，该项目组发表了一些描述这一系统基本原理的论文 1988年实现并运行了一个Demo版本。 1989年六月向少数用户发行了版本1.0 1990年6月发行了带有全新规则系统的版本2.0 1991年的版本3.0再次重写了规则系统，并增加了对多个存储管理器的支持与改进的查询引擎。 1993年开始拥有大量用户，这些用户提供了大量的功能与优化建议。但是在发行了作为细节修正的版本4.0之后，Postgres计划就终止了。 1994年，两个加利福尼亚大学伯克利分校的研究生 Andrew Yu和Jolly Chen 增加了一个SQL语言解释器来替代早先的基于Ingres的QUEL系统，创建了Postgres95。 1996年被重命名为PostgreSQL以便突出该数据库全新的SQL查询语言。 2005年1月19日，PostgreSQL发行了版本8.0。 目前最新的版本已经到了11.5。 安装 PostgreSQL 客户端安装 12&gt; brew install postgresql&gt; 初始化数据库 12&gt; initdb /usr/local/var/postgres&gt; 启动服务 1234567&gt; pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start&gt; # 开始或者停止pg&gt; pg_ctl start|stop&gt; # 查询pg监听端口&gt; netstat -a | grep PGSQ&gt; # 修改端口 postgresql.conf &gt; 参考文档 http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html https://www.jianshu.com/p/10ced5145d39 创建 创建数据库，进入控制台 12345&gt; createdb&gt; # 进入PostgreSQL 控制台&gt; psql&gt; # \l 查看数据库；\q离开控制台&gt; 创建用户 jack 12# 创建角色Jack ，密码123456CREATE USER jack WITH PASSWORD '123456'; 创建属于jack的数据库nosql 1CREATE DATABASE nosql OWNER jack; 将nosql数据库所有权限赋予jack用户 1GRANT ALL PRIVILEGES ON DATABASE nosql to jack; 给jack用户添加创建数据库的属性 1ALTER ROLE jack CREATEDB; 进入nosql 数据库 1psql -U jack -d nosql -h [host] -p [port]； 使用sql 语句创建表 12345678# 创建新表 CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);# 插入数据 INSERT INTO user_tbl(name, signup_date) VALUES('张三', '2013-12-22');# 选择记录 SELECT * FROM user_tbl; 控制台常用命令 123456789101112\password：设置当前登录用户的密码\h：查看SQL命令的解释，比如\h select。\?：查看psql命令列表。\l：列出所有数据库。\c [database_name]：连接其他数据库。\d：列出当前数据库的所有表格。\d [table_name]：列出某一张表格的结构。\du：列出所有用户。\e：打开文本编辑器。\conninfo：列出当前数据库和连接的信息。\password [user]: 修改用户密码\q：退出]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>PG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 简介]]></title>
    <url>%2Fblog%2F2019%2F08%2F21%2FRedis%20%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Redis 简介 Remote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。 Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4][5]根据月度排行网站DB-Engines.com的数据，Redis是最流行的键值对存储数据库。 数据模型 Redis的外围由一个键、值映射的字典构成。与其他非关系型数据库主要不同在于：Redis中值的类型不仅限于字符串，还支持如下抽象数据类型： 字符串列表 无序不重复的字符串集合 有序不重复的字符串集合 键、值都为字符串的哈希表 值的类型决定了值本身支持的操作。Redis支持不同无序、有序的列表，无序、有序的集合间的交集、并集等高级服务器端原子操作。 持久化 Redis通常将全部的数据存储在内存中。2.4版本后可配置为使用虚拟内存，[9]一部分数据集存储在硬盘上，但这个特性废弃了。 当前通过两种方式实现持久化： 使用快照，一种半持久耐用模式。不时的将数据集以异步方式从内存以RDB格式写入硬盘。 RDB文件是Redis持久化的一种方式，Redis通过制定好的策略，按期将内存中的数据以镜像的形式转存到RDB文件中。 https://ningyu1.github.io/site/post/34-redis-rdb/ https://redisbook.readthedocs.io/en/latest/internal/rdb.html 1.1版本开始使用更安全的AOF格式替代，一种只能追加的日志类型。将数据集修改操作记录起来。Redis能够在后台对只可追加的记录作修改来避免无限增长的日志。 AOF 则以协议文本的方式，将所有对数据库进行过写入的命令（及其参数）记录到 AOF 文件，以此达到记录数据库状态的目的。 https://redisbook.readthedocs.io/en/latest/internal/aof.html 同步 Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。从盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。 性能 当数据依赖不再需要，Redis这种基于内存的性质，与在执行一个事务时将每个变化都写入硬盘的数据库系统相比就显得执行效率非常高。[11]写与读操作速度没有明显差别。 接口介绍 http://www.runoob.com/redis/redis-data-types.html 安装 Mac 上安装redis 命令 brew install redis 验证是否安装成功 brew services start redis 启动客户端 cd /usr/local/bin/ redis-cli]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android 获取 WIDEVINE_UUID]]></title>
    <url>%2Fblog%2F2019%2F08%2F20%2FWIDEVINE_UUID%20%E8%8E%B7%E5%8F%96%2F</url>
    <content type="text"><![CDATA[anroid 通过 MediaDrm 获取uuid 1、App 内唯一 2、App 之间不唯一 3、App卸载重装唯一 12345678910111213UUID WIDEVINE_UUID = new UUID(-0x121074568629b532L, -0x5c37d8232ae2de13L);MediaDrm wvDrm = null; try &#123; wvDrm = new MediaDrm(WIDEVINE_UUID); &#125; catch (UnsupportedSchemeException e) &#123; e.printStackTrace(); &#125; byte[] data = wvDrm.getPropertyByteArray(MediaDrm.PROPERTY_DEVICE_UNIQUE_ID); String ID = Base64.getEncoder().encodeToString(data).trim(); Log.i("MAIN", "UUID: "+ ID);wvDrm.close();]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IPv6详解]]></title>
    <url>%2Fblog%2F2019%2F08%2F13%2FIPv6%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[#####]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>IPv6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Q 非SDK检查]]></title>
    <url>%2Fblog%2F2019%2F08%2F06%2FAndroid%20Q%20%E9%9D%9ESDK%20%E6%A3%80%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[SDK 限制等级 greylist 本系统标记为不支持调用。但是无限制，可以正常使用 Blacklist 无论targetVersion如何，使用这些api，系统将会抛出错误 greylist-max-o 受限制的灰名单。targetVersion &lt;= 27 可以正常访问 greylist-max-p 受限制的灰名单。targetVersion &lt;= 28 可以正常访问 检查工具 工具地址 下载下来，将veridex-mac.zip解压出来进行下面操作进行check检查。 Mac 平台 运行如下命令： 1./appcompat.sh --dex-file=test.apk]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android hook]]></title>
    <url>%2Fblog%2F2019%2F08%2F06%2FAndroid%20Hook%2F</url>
    <content type="text"><![CDATA[通过hook方式拦截startActivity 针对android 8以前 12345678910111213141516171819202122232425public void hookAms()&#123; try&#123; Class&lt;?&gt; ActivityManagerNativeClss = Class.forName("android.app.ActivityManagerNative"); Field defaultFiled = ActivityManagerNativeClss.getDeclaredField("gDefault"); defaultFiled.setAccessible(true); Object defaultValue = defaultFiled.get(null); Class&lt;?&gt; SingletonClass = Class.forName("android.util.Singleton"); Field mInstance = SingletonClass.getDeclaredField("mInstance"); mInstance.setAccessible(true); Object iActivityManagerObject = mInstance.get(defaultValue); Class&lt;?&gt; IActivityManagerIntercept = Class.forName("android.app.IActivityManager"); AmsInvocationHandler handler = new AmsInvocationHandler(iActivityManagerObject); Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class&lt;?&gt;[]&#123;IActivityManagerIntercept&#125;, handler); mInstance.set(defaultValue, proxy); &#125;catch (Throwable e)&#123; e.printStackTrace(); &#125; &#125; 针对android 8 以后 123456789101112131415161718192021222324public void hookAMSAfter26() throws Exception &#123; // 第一步：获取 IActivityManagerSingleton Class&lt;?&gt; aClass = Class.forName("android.app.ActivityManager"); Field declaredField = aClass.getDeclaredField("IActivityManagerSingleton"); declaredField.setAccessible(true); Object value = declaredField.get(null); Class&lt;?&gt; singletonClz = Class.forName("android.util.Singleton"); Field instanceField = singletonClz.getDeclaredField("mInstance"); instanceField.setAccessible(true); Object iActivityManagerObject = instanceField.get(value); // 第二步：获取我们的代理对象，这里因为 IActivityManager 是接口，我们使用动态代理的方式 Class&lt;?&gt; iActivity = Class.forName("android.app.IActivityManager"); InvocationHandler handler = new AmsInvocationHandler(iActivityManagerObject); Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class&lt;?&gt;[]&#123;iActivity&#125;, handler); // 第三步：偷梁换柱，将我们的 proxy 替换原来的对象 instanceField.set(value, proxy); &#125; 动态代理 实现 123456789101112131415161718192021222324package com.pa.test.test;import android.util.Log;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;public class AmsInvocationHandler implements InvocationHandler &#123; private Object iActivityManagerObject; AmsInvocationHandler(Object iamo)&#123; this.iActivityManagerObject = iamo; &#125; @Override public Object invoke(Object o, Method method, Object[] objects) throws Throwable &#123; Log.i("HookUtil", method.getName()); if("startActivity".contains(method.getName()))&#123; Log.i("HookUtil", "HookUtil Success "); &#125; return method.invoke(iActivityManagerObject, objects); &#125;&#125; 本质上都是通过反射 + 动态代理的方式，拦截指定方法。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>hook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 动态代理]]></title>
    <url>%2Fblog%2F2019%2F08%2F05%2FJava%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[动态代理 代理模式分为动态代理、静态代理（略）。它的定义： 当无法直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，所访问的真实对象与代理对象需要实现相同的接口。 代理模式是设计模式中的一种,而且在实际的开发中使用的频率非常高 ,比如spring AOP,mybatis代理都是我们经常使用的. 动态代理的优势： 1、降低各个功能模块之间的耦合度，提高开发的效率和方便程序的维护度。 2、减少代码量。 3、不关注目标的具体实现。 Java实现分为4个步骤，如下：需要代理的接口、类： 首先要创建文件夹 proxy 12mkdir proxymkdir com/sun/proxy // 后续输出 $proxy用 12345package proxy;public interface IAction&#123; void sayHello();&#125; 123456789package proxy;import proxy.IAction;public class Person implements IAction&#123; public void sayHello()&#123; System.out.println("hello world"); &#125;&#125; 实现 InvocationHandler 接口 创建 PIHandler.java 类 12345678910111213141516package proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import proxy.Person;public class PIHandler implements InvocationHandler&#123; private Person person; public PIHandler(Person person)&#123; this.person = person; &#125; public Object invoke(Object obj, Method method, Object[] objs) throws Throwable&#123; return method.invoke(this.person, objs); &#125;&#125; 创建代理Demo 创建Main.java类 123456789101112131415161718package proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.*;import proxy.*;public class Main&#123; public static void main(String[] args)throws Throwable&#123; // 从源码中得知，设置这个值，可以把生成的代理类，输出出来。 System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles", "true"); System.out.println(Proxy.getProxyClass(IAction.class.getClassLoader(), IAction.class)); PIHandler ph = new PIHandler(new Person()); IAction ac = (IAction) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class&lt;?&gt;[] &#123;IAction.class&#125;, ph); ac.sayHello(); &#125;&#125; 会将生成的$Proxy0.class 类输出到和proxy 目录同级的com/sun/proxy目录下面。 $Proxy0.class 查看 编译java文件 1javac proxy/Main.java 执行java文件 1java proxy.Main $proxy0.class 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107package com.sun.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.lang.reflect.UndeclaredThrowableException;import proxy.IAction;public final class $Proxy0 extends Proxy implements IAction&#123; private static Method m1; private static Method m3; private static Method m2; private static Method m0; public $Proxy0(InvocationHandler paramInvocationHandler) &#123; super(paramInvocationHandler); &#125; public final boolean equals(Object paramObject) &#123; try &#123; return ((Boolean)this.h.invoke(this, m1, new Object[] &#123; paramObject &#125;)).booleanValue(); &#125; catch (Error|RuntimeException localError) &#123; throw localError; &#125; catch (Throwable localThrowable) &#123; throw new UndeclaredThrowableException(localThrowable); &#125; &#125; public final void sayHello() &#123; try &#123; this.h.invoke(this, m3, null); return; &#125; catch (Error|RuntimeException localError) &#123; throw localError; &#125; catch (Throwable localThrowable) &#123; throw new UndeclaredThrowableException(localThrowable); &#125; &#125; public final String toString() &#123; try &#123; return (String)this.h.invoke(this, m2, null); &#125; catch (Error|RuntimeException localError) &#123; throw localError; &#125; catch (Throwable localThrowable) &#123; throw new UndeclaredThrowableException(localThrowable); &#125; &#125; public final int hashCode() &#123; try &#123; return ((Integer)this.h.invoke(this, m0, null)).intValue(); &#125; catch (Error|RuntimeException localError) &#123; throw localError; &#125; catch (Throwable localThrowable) &#123; throw new UndeclaredThrowableException(localThrowable); &#125; &#125; static &#123; try &#123; m1 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, new Class[] &#123; Class.forName(&quot;java.lang.Object&quot;) &#125;); m3 = Class.forName(&quot;proxy.IAction&quot;).getMethod(&quot;sayHello&quot;, new Class[0]); m2 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;, new Class[0]); m0 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;, new Class[0]); return; &#125; catch (NoSuchMethodException localNoSuchMethodException) &#123; throw new NoSuchMethodError(localNoSuchMethodException.getMessage()); &#125; catch (ClassNotFoundException localClassNotFoundException) &#123; throw new NoClassDefFoundError(localClassNotFoundException.getMessage()); &#125; &#125;&#125; 参考文章： https://www.cnblogs.com/MOBIN/p/5597215.html https://juejin.im/entry/5a4af4116fb9a045104ad95b https://my.oschina.net/daijunjian/blog/1549753 https://www.jianshu.com/p/d5d9215bf8ad]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[懒加载的单例模式]]></title>
    <url>%2Fblog%2F2019%2F08%2F05%2F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[辅助类 Singleton1234567891011121314public abstract class Singleton&lt;T&gt; &#123; private T mInstance; protected abstract T create(); public final T get() &#123; synchronized (this) &#123; if (mInstance == null) &#123; mInstance = create(); &#125; return mInstance; &#125; &#125;&#125; 创建单例：123456789private static final Singleton&lt;IActivityManager&gt; IActivityManagerSingleton = new Singleton&lt;IActivityManager&gt;() &#123; @Override protected IActivityManager create() &#123; final IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE); final IActivityManager am = IActivityManager.Stub.asInterface(b); return am; &#125; &#125;; 1、优点是，提高加载速度。类初始化的时候，没有立即初始化开销大的对象A，而是先初始化了一个接口类。等到实际使用的时候再去初始化对象A。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android 源码目录结构]]></title>
    <url>%2Fblog%2F2019%2F08%2F05%2FAndroid%20%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[一级目录： art - Android Runtime，一种app运行模式，区别去传统的Dalvik虚拟机，目的是提高android系统的流畅性。 bionic - 集成C库源代码，android改造的c/c++库。 bootable - android程序启动引导，适合各种bootloader的通用代码。包括一个recovery目录。 build - 存放系统编译规则以及generic等基础开发包配置。 compatibility - android 兼容计划。 cts - android兼容性测试标准。 dalvik - android dalvik虚拟机相关内容。 developers - 开发者参考文档。 development - android 应用开发基础设施相关。 device - android 支持的各种设备及相关配置。 external - android 中使用的各种外部开源库。 frameworks - 应用层框架，android系统的核心部分，又java、c++实现。 hardware - 硬件适配接口。 kernel - linux 内核，android 默认不提供，只有一个tests目录，需要另外下载。 libcore - android java 核心类库。 libnativehelper - android 动态库，实现jni的基础。 packages - 应用程序包。 pdk - Plug development kit，本地开发套件。 plaform_testing - android 平台测试程序。 prebuilds - x86 和 arm 架构下预编译的一些资源。 sdk - android java层SDK。 system - android底层文件系统库，应用、组件。 test - android Vendor测试框架。 toolchain - android 工具链文件。 tools - android 工具文件。 Android.bp - android 7.0 开始代替 android.mk 文件， 它告诉ndk将jni编译为动态库的脚本。 Makefile - 全局Makefile文件，用来定义编译规则。 framework 二级目录 ： av - 多媒体框架。 base - android 源码的主要核心目录。 compile - 编译相关。 ex - 文件解析器。 hardware - 硬件适配接口。 layoutlib - 布局相关。 minikin - android 原生字体，连体字效果。 ml - 机器学习。 multidex - 多dex 加载器。 native - native 实现。 opt - 一些软件。 rs - Render Script ，创建3D接口。 support - framework 支持文件。 wilhelm - 基于 Khronos 的OpenGL ES/ OpenGLMax AL audio/multi media实现。 base 三级目录： apct-test - 性能优化测试。 api - android应用框架层声明类、属性、资源。 cmds - android 系统启动时用到的commands。 core - framwork的核心框架组件。 data - android系统下的资源(声音、视屏、字体、软盘等)。 docs - android 项目说明文档。 drm - 实现权限管理，数字内容解密等模块的工作。 graphics - 图像渲染模块。 keystore - 密钥库。 libs - 库信息(界面、存储、USB) location - 位置信息。 media - 手机媒体管理。 native - 本地方法实现（传感器、输入、界面、窗体）。 nfc-extras - 近场通讯。 obex - 蓝牙。 opengl - 2D、3D图形绘制。 pacakges - 框架床的实现(界面、服务、存储)。 proto - 协议框架。 rs - 资源框架。 samples - 例子程序。 sax - xml 解析器。 Services - 各种服务程序。 telecomm - telecomm 通信框架。 telephony - 电话通信框架。 tests - 各种测试。 vr - 虚拟现实相关。 wifi - wifi模块。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>aosp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android 优化构建速度]]></title>
    <url>%2Fblog%2F2019%2F08%2F01%2Fandroid%20%E4%BC%98%E5%8C%96%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[Apply plugin 的几种常见定义： apply plugin: ‘com.android.application’ 实际对应的原型是：com.android.build.gradle.AppExtension，表示此项目模块类型为Android App Module，对应构建生成的文件为.apk类型文件。 apply plugin: ‘com.android.library’ 实际对应的原型是：com.android.build.gradle.LibraryExtension，表示此项目模块类型为Android Library Module，对应构建生成的文件为.arr类型的文件。 apply plugin: ‘com.android.test’ 实际对应的原型是：com.android.build.gradle.TestExtension，表示此项目模块类型为Android test Module，可以在单个模块内通过targetProjectPath指定项目，用于对应项目的单元测试。 apply plugin: ‘com.android.feature’ 实际对应的原型是：com.android.build.gradle.FeatureExtension，表示此项目模块类型为Android feature Module，主要用于单个模块内实现特性，以支持Android Instant Apps。 Gradle 配置 defaultConfig 字段解释优化构建速度，参考 官方文档 1、开启离线模式，避免每次更新第三方库文件 2、用静态的版本依赖，避免更新 3、加大JVM 4、开启热启动；PS：第一次还是很慢，第二次会快很多 5、开启并发构建、启用缓存、开启守护进程 等 android Gradle 构建总结 参考Instant Run 工作原理和方法 参考]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置ABI的两种方式]]></title>
    <url>%2Fblog%2F2019%2F08%2F01%2F%E9%85%8D%E7%BD%AEABI%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[通过abiFilter字段配置： 一个是通过设置ndk的abiFilters字段，使apk能够兼容多种abi，但是这样会使得apk体积增大，所以，这种方式只适合配置主流的abi，使apk能在市场上的大部分手机成功安装使用。 123456789101112131415161718android &#123; ... // 其它配置 defaultConfig &#123; ... // 默认配置 ndk &#123; //选择要添加的对应cpu类型的.so库。 abiFilters &apos;armeabi&apos;, &apos;armeabi-v7a&apos; // 还可以添加 // &apos;arm64-v8a&apos;, 64 bit ARM architecture,it can use v7 version // unless you are too much concerned about performance // mips,mips64, There are no devices with MIPS // x86_64, No android devices and anyway it can use X86 version // armeabi, very old architecture. Unsupported after Android 4.4 // &apos;x86&apos;, Intel based devices &#125; &#125; ... // 其它配置&#125; 通过splits字段配置 splits的abi属性下面，定义好支持的abi，然后打包的时候，会根据不同的架构，打不同的包，每个包支持一种架构，这样能让不同架构的设备上安装最合适的apk，但是因为一个apk仅支持一种架构，所以互不兼容。 1234567891011android &#123; ... // 其它配置 splits &#123; abi &#123; reset() enable true // 设为true，才能在打包时根据架构生成不同的apk文件 universalApk false // If true, also generate a universal APK include &quot;armeabi-v7a&quot;, &quot;x86&quot; // 设置所有要支持的abi类型 &#125; &#125;&#125;]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Fblog%2F2019%2F08%2F01%2F%E7%A0%94%E7%A9%B6android%20%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Jar加固]]></title>
    <url>%2Fblog%2F2019%2F07%2F25%2FJar%E5%8A%A0%E5%9B%BA%2F</url>
    <content type="text"><![CDATA[#####]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Q 线刷]]></title>
    <url>%2Fblog%2F2019%2F07%2F25%2FAndroid%20Q%20%E7%BA%BF%E5%88%B7%2F</url>
    <content type="text"><![CDATA[android Q 升级的两种方式：加入android测试版记录 官方网站：https://www.google.com/android/beta 1、优点是炒作简单 2、缺点是需要FQ，SS工具可能无法做到全局代理。如果在境外，或者有可以FQ的路由器应该没问题。 下载zip包，刷入手机 官方网站： https://developers.google.com/android/images 下载对应手机的zip文件，解压到指定目录。 更新 platform-tools到最新版本 手机打开开发者模式，去开发者选项中启动允许OEM解锁。 刷机之前，千万记得退出账号。 adb reboot bootloader 进入到 bootloader模式； fastboot flashing unlock 解锁手机 以pixel 2xl 为例，如果bootloader version 低于 TMZ20a（例如8.0系统），需要执行 fastboot flashing unlock 、fastboot flashing unlock_critical 两条命令解锁。高于TMZ20a的则只需要 fastboot flashing unlock即可。 如果出现 FAILED (remote: ‘Flashing Unlock is not allowed），可以先执行fastboot flashing lock 锁定 OEM，重启手机，然后再次去开发者选项中打开运行OEM解锁，进入 BootLoader模式，然后执行上面两条命令解锁。 执行 flash-all.sh 脚本 刷入ROM 执行 fastboot flashing lock 锁定OEM 我再刷入Android Q之后，在开机连接wifi阶段卡住了，一直通过不了； 尝试过： 1、PC FQ，手机通过wifi代理到PC FQ连接Google服务器，依然无法通过。 2、小米手机4G+FQ，pixel 2xl 通过小米共享的热点FQ，也不行。 3、然后试图刷低版本(8.0)尝试绕过，还是不行。 4、最终通过购买香港一日流量卡解决问题。PS：流量卡需要先激活，我是小米用流量卡，共享热点给Pixel 2XL 连接上的google。流量卡需要用可以正常使用的手机先激活。 5、应该是我的PC、小米 FQ 都没有做到全局代理，导致google的请求没有走代理连接不上服务器。如果有路由器能FQ最好。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>ROM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android SDK 自动化测试]]></title>
    <url>%2Fblog%2F2019%2F07%2F24%2FAndroid%20SDK%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[名词解释 JUnit - JUnit 是一个 Java 编程语言的单元测试框架。文档 JUnit 3 - JUnit 3 是JUnit的3.x版本 在JUnit3中，如果某个类是测试类，必须将其继承类TestCase；如果某个方法是测试方法，必须让这个方法以testXX开头；如果希望指定某个测试方法运行之前运行某个初始化方法，这个方法的名称必须是setUp；如果希望在某个测试方法运行之后运行某个释放资源的方法，这个方法的名称必须是tearDown JUnit 4 - 是JUnit的 4.x版本 JUnit 4是与JUnit3完全不同的API，它基于Java 5.0中的注解、静态导入等构建而成。JUnit 4更简单、更丰富、更易于使用，并引入了更为灵活的初始化和清理工作，还有限时的和参数化测试用例。 在junit4中，一个POJO类就是一个测试类； 1、测试方法通过@Test来标识； 2、初始化方法通过@Before来标识； 3、释放资源的方法通过@After来标识； 4、为了让junit4的测试类在junit3中也可以使用，习惯于把初始化方法命名为setUp，释放资源的方法命名为tearDown。 5、Test中的测试方法一般以Test来开始。其中标识为Before注解的方法，每次运行测试类，都会执行标识为@After与@Before的方法。 Instrumentation - Instrumentation是Android Java API层的一个类. 通过阅读源码可以发现，平时我们在用Application、Activity的时候，实际上Application的创建、Activity的实例化、生命周期里onCreate等方法的调用，都是通过Instrumentation实现的。不仅如此，通过Instrumentation还可以向APP发送用户点击、按钮事件等。获取到了权限足够的Instrumentation，几乎就可以完全控制APP甚至手机了。 AndroidJUnit4 - 继承于Runner抽象类，不负责具体实现。采用了委托模式，由继承于Runner的另一内部对象 AndroidJUnit4ClassRunner 负责具体实现。采用了JUnit4实现。 12345678@RunWith(AndroidJUnit4.class)public class ExampleInstrumentedTest &#123; // @Rule // public ActivityTestRule activityTestRule = new ActivityTestRule(MainActivity.class); @Test public void useAppContext() &#123; &#125;&#125; AndroidJUnitRunner - 用于build.gradle配置文件 123456android &#123; defaultConfig &#123; // ... testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner" &#125;&#125; Instrumentation Test Runner - 可以支持 JUnit Test测试和Instrmentation Unit Tests测试。均只支持JUnit3 Android JUnit Test Runner - 支持JUnit4，对Instumentation Test Runner 的替代。 Local Unit Tests - 基于JVM的，只支持JUnit测试，其测试代码直接在电脑上的JVM中运行。测试类应该放在src/test/java目录下。只能测试纯java代码。 Robolectric 使用教程 ：https://blog.csdn.net/shensky711/article/details/53561172 Robolectric 给 Unit Tests 提供 android框架支持。 Mock 模仿android 依赖, https://www.jianshu.com/p/00ab03f3d394 Instrmentation Unit Tests - 测试类放在src/androidTest/java目录。可以在模拟器、真机上测试，支持和android 框架相关的代码部分测试。 参考文章： http://www.paincker.com/android-test-1 https://developer.android.com/training/testing/?hl=zh-cn 测试Demo Android JUnit Demo 创建。 优点是：直接在JVM上运行，速度快。 1234567891011// 创建Java 类，不涉及android框架相关。public class Cal &#123; public int add(int a, int b) &#123; return a + b; &#125; public int multiply(int a, int b) &#123; return a * b; &#125;&#125;// 自动创建测试样例：在这个类中，右键-&gt; Go to -&gt; Test -&gt; Create New Test -&gt; 选择 src/test/java 目录保存 // 手动创建测试样例：http://www.paincker.com/android-test-2 12345678910111213141516171819202122232425// 右键运行 Run CalTestpublic class CalTest &#123; private Cal mCal; @Before public void setUp() throws Exception &#123; mCal = new Cal(); &#125; @After public void tearDown() throws Exception &#123; mCal = null; &#125; @Test public void add() &#123; assertEquals(mCal.add(2, 3), 5); &#125; @Test public void multiply() &#123; assertEquals(mCal.multiply(2, 3), 6); &#125;&#125; Android Instrumented Tests Demo 创建 优点是：运行在模拟器或者真机上，贴合场景。 对于同一个Java类，可以生成两个测试用例一个Android JUnit， 一个Android Instrumented； 生成方式类似，用例保存地址不同。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android自动化测试]]></title>
    <url>%2Fblog%2F2019%2F07%2F24%2FAndroid%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[android 自动化测试工具介绍：Monkey 是Android SDK自带的测试工具，在测试过程中会向系统发送伪随机的用户事件流，如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试，也有日志输出。实际上该工具只能做程序做一些压力测试，由于测试事件和数据都是随机的，不能自定义，所以有很大的局限性。 参考链接：https://blog.csdn.net/hebbely/article/details/78901466 介绍了Monkey 及相关参数的用法。 MonkeyRunner 也是Android SDK提供的测试工具。严格意义上来说MonkeyRunner其实是一个Api工具包，比Monkey强大，可以编写测试脚本来自定义数据、事件。缺点是脚本用Python来写，对测试人员来说要求较高，有比较大的学习成本。 Instrumentation 是早期Google提供的Android自动化测试工具类，虽然在那时候JUnit也可以对Android进行测试，但是Instrumentation允许你对应用程序做更为复杂的测试，甚至是框架层面的。通过Instrumentation你可以模拟按键按下、抬起、屏幕点击、滚动等事件。Instrumentation是通过将主程序和测试程序运行在同一个进程来实现这些功能，你可以把Instrumentation看成一个类似Activity或者Service并且不带界面的组件，在程序运行期间监控你的主程序。缺点是对测试人员来说编写代码能力要求较高，需要对Android相关知识有一定了解，还需要配置AndroidManifest.xml文件，不能跨多个App。 UiAutomator 也是Android提供的自动化测试框架，基本上支持所有的Android事件操作，对比Instrumentation它不需要测试人员了解代码实现细节（可以用UiAutomatorviewer抓去App页面上的控件属性而不看源码）。基于Java，测试代码结构简单、编写容易、学习成本，一次编译，所有设备或模拟器都能运行测试，能跨App（比如：很多App有选择相册、打开相机拍照，这就是跨App测试）。缺点是只支持SDK 16（Android 4.1）及以上，不支持Hybird App、WebApp。 参考链接： https://blog.csdn.net/eclipsexys/article/details/45622813 Espresso 是Google的开源自动化测试框架。相对于Robotium和UIAutomator，它的特点是规模更小、更简洁，API更加精确，编写测试代码简单，容易快速上手。因为是基于Instrumentation的，所以不能跨App。 官方文档：https://developer.android.com/training/testing/espresso Selendroid 也是基于Instrumentation的测试框架，可以测试Native App、Hybird App、Web App，但是网上资料较少，社区活跃度也不大。 Robotium 也是基于Instrumentation的测试框架，目前国内外用的比较多，资料比较多，社区也比较活跃。缺点是对测试人员来说要有一定的Java基础，了解Android基本组件，不能跨App。 Athrun 是淘宝出的一个移动测试框架/平台，同时支持iOS和Android。Android部分也是基于Instrumentation，在Android原有的ActivityInstrumentationTestCase2类基础上进行了扩展，提供一整套面向对象的API。这里有详细介绍。 CSDN：https://blog.csdn.net/xiaobai20131118/article/details/43762527 官方文档没有找到，可能是已经关闭了。 Appium 是最近比较热门的框架，社区也很活跃。Appium是一个跨平台工具，它允许测试人员使用同样的接口、基于不同的平台写自动化测试代码，大大增加了测试套件间代码的复用性。android部分是基于UiAutomator和Selendroid。 官方文档：https://github.com/appium/appium/tree/master/docs/cn Macaca macaca 是阿里的提供的解决方案,android部分也是基于uiautomator，和AutomatorX很类似，集成了多个工具集。1.功能与AutomatorX基本相同，除了可以用wifi 2.网页的测试更好. 依赖过多，安装复杂。 官方文档：https://macacajs.github.io/zh/ AutomatorX AutomatorX是网易给出的一套解决方案，是集合了各个测试框架之后给的一个方案，所以目前看来功能点是最全的。支持夸平台。 官方文档：https://github.com/NetEaseGame/ATX]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 注解]]></title>
    <url>%2Fblog%2F2019%2F07%2F22%2FJava%20%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Java 注解 Java 注解定义： Java 注解又称标注，Java 5.0 开始支持，是一种特殊的语法元数据。 Java 语言中的包、类、方法、参数、变量都可以被标注。和Javadoc不同，标注可以通过反射或者标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java虚拟机可以保留标注内容，在运行时可以获取到标注内容。当然也支持自定义的标注。 Annotation Processing tool 即 apt tool，提供了一个补充性的编译时注解操作接口。 Java 内置的注解有： 作用在代码的注解： @override - 检查该方法是否是重载方法。如果发现其父类或者是引用的接口中并没有改方法时，会报编译错误。 @Deprecated - 标记过时方法。如果使用该方法，会报编译警告。 @SuppressWarnings - 指示编译器去忽略注解中声明的警告。 作用于其他注解的注解（或者说元注解）： @Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。 @Ducumented - 标记这个注解是否包含在用户文档中。 @Target - 标记这个注解应该是那种Java成员。 @Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类) 从Java 7 额外添加了3个注解： @SafeVarargs - Java 7 支持，忽略任何使用参数为泛型变量的方法或构造函数的调用产生的警告。 @FunctionalInterface - Java 8 开始支持，标识一个匿名函数或者函数式接口。 @Repeatable - Java 8 开始支持， 标识某注解可以在同一个声明是使用多次。 android 内置注解 @Nullable - 指示变量、参数、返回值可以为null。 @NonNull - 指示变量、参数、返回值不可以为null。 资源注解： @StringRes - 字符串标注，参数只接受R.string.tips， R.color.tips报错。虽然都是整形。 @DrawableRes - 以下都同上。 @DimenRes - @ColorRes - @InterpolatorRes - @LayoutRes - 线程注解：用于检测某个方法是否从指定类型的线程中调用。 @MainThread - @UIThread - @WorkerThread - @BinderThread - @AnyThread - 值约束注解： @IntRange - 验证传递参数的值的取值范围 @FloatRange - 同上 @Size - 验证传递参数的值（例如：数组等）的长度。 权限注解： @RequiresPermission - 验证方法调用方的权限。 返回值注解： @CheckResult - 验证调用方是否有对方法的返回值进行处理。 超类注解： @CallSuper - 验证子类重新父类的方法，是否有调用父类的实现，没有则报警告。 枚举注解： @Typedef - 可以确保特定的参数、返回值、字段引用特定的常量集。 代码可访问性注解： @Keep - 标注的类或者方法在混淆的时候不被混淆。 其他常见注解： @TargetApi - 用于屏蔽IDE对API版本的限制。即相当于告诉编译器标记的代码在指定的api上面运行。 @SuppressLint - 类似@TargetApi，屏蔽IDE对API版本的一切限制。 @Widget - 标记该类是自定义的Widget类。 测试可见注解： @VisibleForTesting - 标注是否对测试可见。 android 注解的特性： 1、依赖注入； 2、简化线程操作； 3、事件绑定； 4、No Magic，只是在编译的时候生成了子类，可以检查代码看是如何运行的。 5、体积小，无反射，没有运行时影响。不会影响性能。 运行时动态注解实现：参考 运行时注解一般和反射机制配合使用，相比编译时注解性能比较低，但灵活性好，实现起来比较简单。 创建注解，创建一个可以字符串相加的注解。 123456789101112package com.pa.test.test;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Retention(RetentionPolicy.RUNTIME)@Target(value = ElementType.FIELD)public @interface Append&#123; String str1() default "hello"; String str2() default "world";&#125; 用反射实现注解处理： 123456789101112131415161718192021222324252627package com.pa.test.test;import java.lang.reflect.Field;//importpublic class Inject &#123; public static void inject(final Object object)&#123; Field[] fields = object.getClass().getDeclaredFields(); for(Field field: fields)&#123; Append append = field.getAnnotation(Append.class); if(append != null)&#123; if(object instanceof MainActivity)&#123; String str = append.str1() + append.str2(); field.setAccessible(true); try &#123; field.set(object, str); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; &#125;&#125; 注解使用Demo 123456789101112131415161718@Append(str1 = "how", str2 = "are you")public String tips;@Appendpublic String names;@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Inject.inject(this); // 控制台输出：howare you helloworld Log.i("TAG", tips + " "+ names);&#125; 编译时注解实现： 编译时注解通过注解处理器实现。注解处理器是（Annotation Processor）是javac的一个工具，用来在编译时扫描和编译和处理注解（Annotation）。 注解处理器以Java代码或者（编译过的字节码）作为输入，生成文件（通常是java文件）。这些生成的java文件不能修改，并且会同其手动编写的java代码一样会被javac编译。 创建注解 使用 Java Module - lib_annotations，用于在编译时，生成XXX_SUFFIX.java 文件，代码如下： 12345678910111213package com.pa.test.lib_annotations;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Retention(RetentionPolicy.RUNTIME)@Target(value = ElementType.FIELD)public @interface EAppend &#123; String str1() default "hello"; String str2() default "world";&#125; 创建注解解析器 使用 Java Module - lib_compiler, 依赖上面 Module，代码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package com.pa.test.lib_compiler;import com.pa.test.lib_annotations.EAppend;import javax.lang.model.element.Element;import javax.lang.model.element.Name;import javax.lang.model.element.TypeElement;import javax.lang.model.type.TypeMirror;import javax.lang.model.util.Elements;// public class AnnotatedClass &#123; private final String value1; private final String value2; public Element mClassElement; /** * 元素相关的辅助类 */ public Elements mElementUtils; public TypeMirror elementType; public Name elementName; public AnnotatedClass(Element classElement) &#123; this.mClassElement = classElement; this.elementType = classElement.asType(); this.elementName = classElement.getSimpleName(); value1 = mClassElement.getAnnotation(EAppend.class).str1(); value2 = mClassElement.getAnnotation(EAppend.class).str2(); &#125; Name getElementName() &#123; return elementName; &#125; TypeMirror getElementType()&#123; return elementType; &#125; String getTotal()&#123; return "\""+ (value1 + value2) + "\""; &#125; /** * 包名 */ public String getPackageName(TypeElement type) &#123; return mElementUtils.getPackageOf(type).getQualifiedName().toString(); &#125; /** * 类名 */ private static String getClassName(TypeElement type, String packageName) &#123; int packageLen = packageName.length() + 1; return type.getQualifiedName().toString().substring(packageLen).replace('.', '$'); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152package com.pa.test.lib_compiler;import com.google.auto.service.AutoService;import com.pa.test.lib_annotations.EAppend;import com.squareup.javapoet.JavaFile;import com.squareup.javapoet.MethodSpec;import com.squareup.javapoet.TypeName;import com.squareup.javapoet.TypeSpec;import java.io.IOException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.LinkedHashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.processing.AbstractProcessor;import javax.annotation.processing.Filer;import javax.annotation.processing.Messager;import javax.annotation.processing.ProcessingEnvironment;import javax.annotation.processing.Processor;import javax.annotation.processing.RoundEnvironment;import javax.lang.model.SourceVersion;import javax.lang.model.element.Element;import javax.lang.model.element.ElementKind;import javax.lang.model.element.Modifier;import javax.lang.model.element.TypeElement;import javax.lang.model.util.Elements;import javax.lang.model.util.Types;import javax.tools.Diagnostic;@AutoService(Processor.class)public class EAppendProcessor extends AbstractProcessor &#123; private static final String EAPPEND_SUFFIX = "_EAppend"; private static final String TARGET_STATEMENT_FORMAT = "target.%1$s = %2$s"; private static final String CONST_PARAM_TARGET_NAME = "target"; private static final char CHAR_DOT = '.'; private Messager messager; private Types typesUtil; private Elements elementsUtil; private Filer filer; /** * 解析的目标注解集合，一个类里可以包含多个注解，所以是Map&lt;String, List&lt;AnnotatedClass&gt;&gt; */ Map&lt;String, List&lt;AnnotatedClass&gt;&gt; annotatedElementMap = new LinkedHashMap&lt;&gt;(); @Override public synchronized void init(ProcessingEnvironment processingEnvironment) &#123; super.init(processingEnvironment); messager = processingEnv.getMessager(); typesUtil = processingEnv.getTypeUtils(); filer = processingEnv.getFiler(); elementsUtil = processingEnv.getElementUtils(); &#125; @Override public SourceVersion getSupportedSourceVersion() &#123; return SourceVersion.latestSupported(); &#125; @Override public Set&lt;String&gt; getSupportedAnnotationTypes() &#123; Set&lt;String&gt; annotataions = new LinkedHashSet&lt;String&gt;(); annotataions.add(EAppend.class.getCanonicalName()); return annotataions; &#125; @Override public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123; // 因为该方法可能会执行多次，所以每次进来必须clear annotatedElementMap.clear(); //1.遍历每个有Add注解的Element， //2.然后把它加入Map里面,一个类里可以包含多个注解，所以是Map&lt;String, List&lt;AnnotatedClass&gt;&gt;， //3.赋予它工作任务，告诉他你该做什么， //4.然后生成Java文件 for (Element element : roundEnv.getElementsAnnotatedWith(EAppend.class)) &#123; //判断被注解的类型是否符合要求 if (element.getKind() != ElementKind.FIELD) &#123; messager.printMessage(Diagnostic.Kind.ERROR, "Only FIELD can be annotated with @%s"); &#125; TypeElement encloseElement = (TypeElement) element.getEnclosingElement(); String fullClassName = encloseElement.getQualifiedName().toString(); AnnotatedClass annotatedClass = new AnnotatedClass(element); //把类名和该类里面的所有关于Add注解的注解放到Map里面 if(annotatedElementMap.get(fullClassName) == null)&#123; annotatedElementMap.put(fullClassName, new ArrayList&lt;AnnotatedClass&gt;()); &#125; annotatedElementMap.get(fullClassName).add(annotatedClass); &#125; //因为该方法会执行多次，所以size=0时返回true结束 if (annotatedElementMap.size() == 0) &#123; return true; &#125; //用javapoet生成类文件 try &#123; for (Map.Entry&lt;String, List&lt;AnnotatedClass&gt;&gt; entry : annotatedElementMap.entrySet()) &#123; MethodSpec constructor = createConstructor(entry.getValue()); TypeSpec binder = createClass(getClassName(entry.getKey()), constructor); JavaFile javaFile = JavaFile.builder(getPackage(entry.getKey()), binder).build(); javaFile.writeTo(filer); &#125; &#125; catch (IOException e) &#123; messager.printMessage(Diagnostic.Kind.ERROR, "Error on creating java file"); &#125; return true; &#125; //以下是javapoet创建各种方法的实现方式 private MethodSpec createConstructor(List&lt;AnnotatedClass&gt; randomElements) &#123; AnnotatedClass firstElement = randomElements.get(0); MethodSpec.Builder builder = MethodSpec.constructorBuilder() .addModifiers(Modifier.PUBLIC) .addParameter(TypeName.get(firstElement.mClassElement.getEnclosingElement().asType()), CONST_PARAM_TARGET_NAME); for (int i = 0; i &lt; randomElements.size(); i++) &#123; addStatement(builder, randomElements.get(i)); &#125; return builder.build(); &#125; private void addStatement(MethodSpec.Builder builder, AnnotatedClass randomElement) &#123; builder.addStatement(String.format( TARGET_STATEMENT_FORMAT, randomElement.getElementName().toString(), randomElement.getTotal()) ); &#125; private TypeSpec createClass(String className, MethodSpec constructor) &#123; return TypeSpec.classBuilder(className + EAPPEND_SUFFIX) .addModifiers(Modifier.PUBLIC, Modifier.FINAL) .addMethod(constructor) .build(); &#125; private String getPackage(String qualifier) &#123; return qualifier.substring(0, qualifier.lastIndexOf(CHAR_DOT)); &#125; private String getClassName(String qualifier) &#123; return qualifier.substring(qualifier.lastIndexOf(CHAR_DOT) + 1); &#125;&#125; 123456789101112apply plugin: 'java-library'dependencies &#123; implementation fileTree(dir: 'libs', include: ['*.jar']) compile 'com.squareup:javapoet:1.9.0' compile 'com.google.auto.service:auto-service:1.0-rc4' implementation project(':lib_annotations')&#125;sourceCompatibility = "7"targetCompatibility = "7" AutoService 主要的作用是注解 processor 类，并对其生成 META-INF 的配置信息。 JavaPoet 这个库的主要作用就是帮助我们通过类调用的形式来生成代码。 参考：https://juejin.im/entry/58fefebf8d6d810058a610de 参考：https://juejin.im/post/584d4b5b0ce463005c5dc444 创建辅助模块 使用存Java Module - lib_api ，用于将类A.java 与 编译时生成的A_SUFFIX.java 关联，非必须的。也可以在 Demo中手动关联。 1234567891011121314151617181920212223242526272829303132package com.pa.test.lib_api;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;public class Utils &#123; private static final String EAppend_SUFFIX = "_EAppend"; private Utils() &#123; &#125; public static void inject(Object object) &#123; try &#123; Class bindingClass = Class.forName(object.getClass().getCanonicalName() + EAppend_SUFFIX); Constructor constructor = bindingClass.getConstructor(object.getClass()); constructor.newInstance(object); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (NoSuchMethodException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 创建demo 123456789101112131415161718192021222324252627282930 @Append(str1 = "how", str2 = "are you")public String tips; @Appendpublic String names; @EAppend(str1 = "hi ", str2 = "annotations")public String ann; @EAppendpublic String ant; @Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Inject.inject(this); // howare you helloworld Log.i("TAG", tips + " "+ names); Utils.inject(this); // hi annotations helloworld Log.i("TAG", ann + " "+ ant); &#125; 1234567891011121314151617181920212223242526272829303132apply plugin: &apos;com.android.application&apos;android &#123; compileSdkVersion 29 defaultConfig &#123; applicationId &quot;com.pa.test.test&quot; minSdkVersion 26 targetSdkVersion 29 versionCode 1 versionName &quot;1.0&quot; testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot; &#125; buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125;&#125;dependencies &#123; implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;]) implementation &apos;com.android.support:appcompat-v7:28.+&apos; implementation &apos;com.android.support.constraint:constraint-layout:1.1.3&apos; testImplementation &apos;junit:junit:4.12&apos; androidTestImplementation &apos;com.android.support.test:runner:1.0.2&apos; androidTestImplementation &apos;com.android.support.test.espresso:espresso-core:3.0.2&apos; api project(&apos;:lib_annotations&apos;) api project(&apos;:lib_api&apos;) annotationProcessor project(&apos;:lib_compiler&apos;)&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + github 搭建静态博客]]></title>
    <url>%2Fblog%2F2019%2F07%2F19%2FHexo%20%2B%20github%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo + github 搭建静态博客 注册github，创建项目; 参考文章 安装git、curl、brew、node.js等 安装hexo 相关; 参考文章 12$ npm install -g hexo-cli$ npm install hexo-deployer-git --save 初始化hexo项目 1hexo init 进入hexo 项目的根目录，获取next 主题 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 修改hexo 项目更目录下面的_config.yml文件 123456789101112title: noteauthor: lpllanguage: zh-Hansurl: https://zubao.github.io/blogroot: /blog/deploy: type: git repo: git@github.com:zubao/blog.git branch: master message: message hexo 命令介绍; hexo 文档 hexo g 生成静态文件 hexo d 发布到github hexo s 启动本地静态服务器 ls -i tcp:4000 查找端口为4000的进程 kill -9 PID 杀掉进程 hexo clean 清除缓存 next 主题文档介绍: 官方文档]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AOSP 编译文档]]></title>
    <url>%2Fblog%2F2019%2F07%2F19%2FAOSP%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[准备工作： Mac Pro 10.14版本，16G内存，256G SSD； 外接移动硬盘1T，使用自带的磁盘工具分区；A区不分大小写，用于时间机器备份电脑；B区(Mac OS扩展，区分大小写)用于AOSP项目。 参考官网配置环境 去清华镜像下载AOSP初始包；使用curl -C - -O 命令，迅雷需要会员不然下载不了。文件47.8GB，需要使用支持断点续传的工具下载。 官网下载文档 下载md5文件 验证aosp-latest.tar文件的md5值，判断是否下载完整。 1brew install md5sha1sum 验证md5 1md5sum aosp-latest.tar 将初始包下载到移动硬盘分区中，并解压： 1tar xf aosp-latest.tar 运行命令同步项目： 1repo sync 如果命令repo没有，参考清华文档 下载配置。 查看远程分支，切换分支： 查看可切换的分支 ，切换分支，并同步代码： 123456cd .repo/manifests git branch -a 切换到9.0分支repo init -b android-9.0.0_r34同步代码repo sync （可选）切换命令行运行的shell版本 123ps -p $$ // 查看当前运行的shell版本chsh -s /bin/bash // 切换到b shellchsh -s /bin/zsh // 切换到 z shell 初始化环境, 必须在bash环境运行。 12cd aospsource build/envsetup.sh (可选)查看cpu内核数，用于编译时选择线程数。我的是4核 1sysctl -n machdep.cpu.core_count 通过lunch 命令选择要编译的源码架构, 需要输入对应的序号。ps：lunch可能会花几分钟。 编译源码，x=cpu核心数*2+2。如果没有lunch，默认编译第一个。 1make -jx 清理编译产生的文件 1make clobber AOSP目录详解 解释每个目录、子目录的用途，编译宏观上理解android。 刷机文档 错误a 1internal error: could not open symlink hardware/qcom/sdm710/Android.bp 方法1：删除sdm710目录；(采用，验证可以通过这个错误) 方法2：重新解压，重新同步不同的分支。 网上说法是，遗漏了某些文件，或者是上一个分支的问题没有移除；参考 错误b 1internal error: Could not find a supported mac sdk: [&quot;10.10&quot; &quot;10.11&quot; &quot;10.12&quot; &quot;10.13&quot;] 解决方法：参考 123456789vim build/soong/cc/config/x86_darwin_host.godarwinSupportedSdkVersions = []string&#123; &quot;10.10&quot;, &quot;10.11&quot;, &quot;10.12&quot;, &quot;10.13&quot;, &quot;10.14&quot;,&#125;因为我的系统版本，xcode版本是10.14，这里也添加 10.14 添加10.14后，可能报错误 ，解决方法是下载MacOSX10.13.SDK 放到 目录： 1/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs 这里要注意的是10.13SDK网上有些版本是有bug的，部分文件的符号引用在文件夹移动之后失效。上面下载地址中github上修正了这个bug。 编译成功提示 1#### build completed successfully (05:58:17 (hh:mm:ss)) #### 运行emulator 运行模拟器。 1emulator -partition-size 3000 运行模拟器报错 1emulator: command not found 原因是 直接使用make编译的项目。 解决方法： 使用lunch 选择 aosp_x86_64-eng 重新编译，就可以正常启动模拟器。参见 使用IntelliJ 阅读源码 1、使用命令，生成android.ipr, android.iml文件 12&gt; make idegen &amp;&amp; development/tools/idegen/idegen.sh&gt; 2、修改IntelliJ 配置，扩大虚拟机使用内存，文件大小写敏感。方法：打开IntelliJ包内容，bin目录下找到 idea.vmoptions 和 idea.properties 这两个文件。具体参考：https://www.jianshu.com/p/1d1b8d0de1ed]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>AOSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java虚拟机阅读]]></title>
    <url>%2Fblog%2F2019%2F07%2F15%2FJava%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[Java 虚拟机阅读 KVM (Kilobyte VM) KVM 中的 K 是“Kilobyte”的意思，它强调简单，轻量，高度可移植，但是运行速度比较慢。在 Androd、iOS 等智能手机操作系统出现前曾经在手机平台上得到非常广泛应用。 优点：包含JVM最核心的组件；实现方式与JVM规范描述的抽象的JVM相近 缺点：是Java ME CLDC VM，而不是Java SE VM；未实现反射、浮点计算等功能。 注意：KVM(kernel-base VM) 是一款基于linux内核的虚拟机 QEMU+KVM KVM 介绍 宋宝华KVM介绍 Java 虚拟机家族考 Squawk VM Squawk VM 是由 Sun 开发，运行于 Sun SPOT（Sun Small Programmable Object Technology，一种手持的 Wifi 设备），也曾经运用于 Java Card。这是一个 Java 代码比重很高的嵌入式虚拟机实现，其中诸如类加载器、字节码验证器、垃圾收集器、解释器、编译器和线程调度都是 Java 语言本身所完成的，仅仅靠 C 语言来编写设备 I/O 和必要的本地代码。 JavaInJava JavaInJava 是 Sun 公司 1997 年～1998 年间所研发的一个实验室性质的虚拟机，从名字就可以看出，它试图以 Java 语言来实现 Java 语言本身的运行环境，既所谓的“元循环”（Meta-Circular，是指使用语言自身来实现其运行环境）。它必须运行在另外一个宿主虚拟机之上，内部没有 JIT 编译器，代码只能以解释模式执行。在上世纪末主流 Java 虚拟机都未能很好解决性能问题的时代，开发这种项目，其执行速度大家可想而知。 Maxine VM Maxine VM 和上面的 JavaInJava 非常相似，它也是一个几乎全部以 Java 代码实现（只有用于启动 JVM 的加载器使用 C 语言编写）的元循环 Java 虚拟机。这个项目于 2005 年开始，到现在仍然在发展之中，比起 JavaInJava，Maxine VM 就显得“靠谱”很多，它有先进的 JIT 编译器和垃圾收集器（但没有解释器），可在宿主模式或独立模式下执行，其执行效率已经接近了 HotSpot Client VM 的水平 JRockit VM 曾经号称“世界上速度最快的 Java 虚拟机”（广告词，貌似 J9 VM 也这样说过），它是 BEA 公司在 2002 年从 Appeal Virtual Machines 公司收购获得的虚拟机。BEA 将其发展为一款专门为服务器硬件和服务端应用场景高度优化的虚拟机，由于专注于服务端应用，它可以不太关注于程序启动速度，因此 JRockit 内部不包含解析器实现，全部代码都靠即时编译器编译后执行。除此之外，JRockit 的垃圾收集器和 MissionControl 服务套件等部分的实现，在众多 Java 虚拟机中也一直处于领先水平。 IBM J9 VM 并不是 IBM 公司唯一的 Java 虚拟机，不过是目前 IBM 主力发展的 Java 虚拟机，J9 原本是内部开发代号，正式名称是“IBM Technology for Java Virtual Machine”，简称 IT4J，只是这个名字太拗口了一点，普及程度不如 J9。J9 VM 最初是由 IBM Ottawa 实验室一个 SmallTalk 的虚拟机扩展而来的，当时这个虚拟机有一个 bug 是因为 8k 值定义错误引起，工程师们花了很长时间终于发现并解决了这个错误，此后这个版本的虚拟机就被称为 K8 了，后来扩展出支持 Java 的虚拟机就被称为 J9 了。与 BEA JRockit 专注于服务端应用不同，IBM J9 的市场定位与 Sun HotSpot 比较接近，它是一款设计上从服务端到桌面应用再到嵌入式都全面考虑的多用途虚拟机，J9 的开发目的是作为 IBM 公司各种 Java 产品的执行平台，它的主要市场在和 IBM 产品（如 IBM WebSphere 等）搭配以及在 IBM AIX 和 z/OS 这些平台上部署 Java 应用。 Apache Harmony 是一个 Apache 软件基金会旗下以 Apache License 协议开源的实际兼容于 JDK 1.5 和 JDK 1.6 的 Java 程序运行平台，这个介绍相当拗口。它包含自己的虚拟机和 Java 库，用户可以在上面运行 Eclipse、Tomcat、Maven 等常见的 Java 程序，但是……它没有通过 TCK 认证，所以我们不得不用那么一长串拗口的语言来介绍它，而不能用一句“Apache 的 JDK”来说明。如果一个公司要宣布自己的运行平台“兼容于 Java 语言”，那就必须要通过 TCK（Technology Compatibility Kit）的兼容性测试，Apache 基金会曾要求 Sun 公司提供 TCK 的使用授权，但是一直遭到拒绝，直到 Oracle 收购了 Sun 公司之后，双方关系越闹越僵，最终导致 Apache 愤然退出 JCP（Java Community Process）组织，这是近代 Java 社区最严重的一次分裂。 Dalvik VM 是 Android 平台的核心组成部分之一，它名字来源于冰岛一个名为 Dalvik 的小渔村。Dalvik VM 并不是一个 Java 虚拟机，它没有遵循 Java 虚拟机规范，不能直接执行 Java 的 class 文件，使用寄存器架构而不是 JVM 中常见的栈架构。但是它与 Java 却又有着千丝万缕的联系，它执行 dex（Dalvik Executable）文件可以通过 class 文件转化而来，使用 Java 语法编写应用程序，可以直接使用大部分的 Java API 等等。目前 Dalvik VM 随着 Android 一起处于迅猛发展阶段，在 Android 2.2 中已提供即时编译器实现，执行性能有了很大的提高。]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java JNI 调用 C 实现]]></title>
    <url>%2Fblog%2F2019%2F07%2F15%2FJava%20JNI%20%E8%B0%83%E7%94%A8%20C%20%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[Java JNI 调用 C 实现 创建目录hook 创建Test.java文件 12345678910111213141516171819 package hook; 2 public class Test&#123; 3 static&#123; 4 System.loadLibrary("test"); 5 &#125; 6 7 public native int nativeAdd(int x, int y); 8 9 public int add(int x, int y)&#123;10 return x + y;11 &#125;1213 public static void main(String[] args)&#123;14 Test test = new Test();15 System.out.println(System.getProperty("java.library.path"));16 System.out.println(test.add(3, 5));17 System.out.println(test.nativeAdd(3, 5));18 &#125;19 &#125; 编译java文件. 1javac hook/Test.java 创建 jni 头文件 1234567891011121314151617181920212223javah -jni hook.Test 1 /* DO NOT EDIT THIS FILE - it is machine generated */ 2 #include &lt;jni.h&gt; 3 /* Header for class hook_Test */ 4 5 #ifndef _Included_hook_Test 6 #define _Included_hook_Test 7 #ifdef __cplusplus 8 extern "C" &#123; 9 #endif 10 /* 11 * Class: hook_Test 12 * Method: nativeAdd 13 * Signature: (II)I 14 */ 15 JNIEXPORT jint JNICALL Java_hook_Test_nativeAdd 16 (JNIEnv *, jobject, jint, jint); 17 18 #ifdef __cplusplus 19 &#125; 20 #endif 21 #endif 编写Test.c 文件，和hook 同一级目录。 1234561 #include "hook_Test.h"23 JNIEXPORT jint JNICALL Java_hook_Test_nativeAdd4 (JNIEnv * env, jobject obj, jint x, jint y)&#123;5 return x + y ;6 &#125; 生成动态链接库，命令如下 1gcc -dynamiclib -o libtest.jnilib Test.c -framework JavaVM -I $JAVA_HOME/include -I $JAVA_HOME/include/darwin 说明： -o：指定动态链接库编译后生成的路径及文件名 -dynamiclib：表示编译成动态链接库 -framework JavaVM -I：编译JNI需要用到JVM的头文件(jni.h)，第一个目录是平台无关的，第二个目录是与操作系统平台相关的头文件 mac 上和linux上命令有少许差异，linux 上是生成so文件，mac上是生成jnilib文件 参考文件linux,[参考文件多平台]([http://blog.0613.me/2017/05/14/20170514%20-%20Java-%E9%80%9A%E8%BF%87-JNI-%E8%B0%83%E7%94%A8-so-jnilib-%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/](http://blog.0613.me/2017/05/14/20170514 - Java-通过-JNI-调用-so-jnilib-动态链接库/)) 执行验证结果 1java -Djava.library.path=. hook.Test 需要加上 -Djava.library.path=. 指明从当前目录加载动态链接库文件，否则会出现找不到库文件的异常。 查看class 文件命令 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134javap -verbose hook.TestClassfile /Users/lipeilong/note/java/vm/hook/Test.class Last modified 2019-7-15; size 747 bytes MD5 checksum 223fad605354553a14ee9dd1adaae086 Compiled from "Test.java"public class hook.Test minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPERConstant pool: #1 = Methodref #13.#26 // java/lang/Object."&lt;init&gt;":()V #2 = Class #27 // hook/Test #3 = Methodref #2.#26 // hook/Test."&lt;init&gt;":()V #4 = Fieldref #28.#29 // java/lang/System.out:Ljava/io/PrintStream; #5 = String #30 // java.library.path #6 = Methodref #28.#31 // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String; #7 = Methodref #32.#33 // java/io/PrintStream.println:(Ljava/lang/String;)V #8 = Methodref #2.#34 // hook/Test.add:(II)I #9 = Methodref #32.#35 // java/io/PrintStream.println:(I)V #10 = Methodref #2.#36 // hook/Test.nativeAdd:(II)I #11 = String #37 // test #12 = Methodref #28.#38 // java/lang/System.loadLibrary:(Ljava/lang/String;)V #13 = Class #39 // java/lang/Object #14 = Utf8 &lt;init&gt; #15 = Utf8 ()V #16 = Utf8 Code #17 = Utf8 LineNumberTable #18 = Utf8 nativeAdd #19 = Utf8 (II)I #20 = Utf8 add #21 = Utf8 main #22 = Utf8 ([Ljava/lang/String;)V #23 = Utf8 &lt;clinit&gt; #24 = Utf8 SourceFile #25 = Utf8 Test.java #26 = NameAndType #14:#15 // "&lt;init&gt;":()V #27 = Utf8 hook/Test #28 = Class #40 // java/lang/System #29 = NameAndType #41:#42 // out:Ljava/io/PrintStream; #30 = Utf8 java.library.path #31 = NameAndType #43:#44 // getProperty:(Ljava/lang/String;)Ljava/lang/String; #32 = Class #45 // java/io/PrintStream #33 = NameAndType #46:#47 // println:(Ljava/lang/String;)V #34 = NameAndType #20:#19 // add:(II)I #35 = NameAndType #46:#48 // println:(I)V #36 = NameAndType #18:#19 // nativeAdd:(II)I #37 = Utf8 test #38 = NameAndType #49:#47 // loadLibrary:(Ljava/lang/String;)V #39 = Utf8 java/lang/Object #40 = Utf8 java/lang/System #41 = Utf8 out #42 = Utf8 Ljava/io/PrintStream; #43 = Utf8 getProperty #44 = Utf8 (Ljava/lang/String;)Ljava/lang/String; #45 = Utf8 java/io/PrintStream #46 = Utf8 println #47 = Utf8 (Ljava/lang/String;)V #48 = Utf8 (I)V #49 = Utf8 loadLibrary&#123; public hook.Test(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V 4: return LineNumberTable: line 2: 0 public native int nativeAdd(int, int); descriptor: (II)I flags: ACC_PUBLIC, ACC_NATIVE public int add(int, int); descriptor: (II)I flags: ACC_PUBLIC Code: stack=2, locals=3, args_size=3 0: iload_1 1: iload_2 2: iadd 3: ireturn LineNumberTable: line 10: 0 public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=4, locals=2, args_size=1 0: new #2 // class hook/Test 3: dup 4: invokespecial #3 // Method "&lt;init&gt;":()V 7: astore_1 8: getstatic #4 // Field java/lang/System.out:Ljava/io/PrintStream; 11: ldc #5 // String java.library.path 13: invokestatic #6 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String; 16: invokevirtual #7 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 19: getstatic #4 // Field java/lang/System.out:Ljava/io/PrintStream; 22: aload_1 23: iconst_3 24: iconst_5 25: invokevirtual #8 // Method add:(II)I 28: invokevirtual #9 // Method java/io/PrintStream.println:(I)V 31: getstatic #4 // Field java/lang/System.out:Ljava/io/PrintStream; 34: aload_1 35: iconst_3 36: iconst_5 37: invokevirtual #10 // Method nativeAdd:(II)I 40: invokevirtual #9 // Method java/io/PrintStream.println:(I)V 43: return LineNumberTable: line 14: 0 line 15: 8 line 16: 19 line 17: 31 line 18: 43 static &#123;&#125;; descriptor: ()V flags: ACC_STATIC Code: stack=1, locals=0, args_size=0 0: ldc #11 // String test 2: invokestatic #12 // Method java/lang/System.loadLibrary:(Ljava/lang/String;)V 5: return LineNumberTable: line 4: 0 line 5: 5&#125;SourceFile: "Test.java"]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jni</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取设备名称]]></title>
    <url>%2Fblog%2F2019%2F06%2F28%2Fandroid%E8%AE%BE%E5%A4%87%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[获取设备名称 1234BluetoothAdapter.getDefaultAdapter().getName()静态权限：android.permission.BLUETOOTH PS：小米手机配对后可以获取真实值、努比亚需要开蓝牙才可以获取真实值。Pixel 2XL可以。 android 6.0开始。WifiInfo.getMacAddress() 方法和 BluetoothAdapter.getAddress() 方法现在会返回常量值 02:00:00:00:00:00。 android 6.0 引入运行时权限 6.0 引入低功耗模式：当用户设备未插接电源、处于静止状态且屏幕关闭时，该模式会推迟 CPU 和网络活动，从而延长电池寿命。定时短期恢复正常工作。7.0对低功耗模式进行优化，不处于静止状态也可以进入低功耗模式(例如：放在口袋)。低功耗模式第一步：关闭网络、停止同步、作业；静止一段时间进入第二步：关闭gps、闹钟，wifi扫描等。 6.0引入待机模式：一段时间不触摸手机，进入待机模式。 6.0 移除了 对 apache http支持，请使用HttpUrlConnection 6.0USB传输数据，必须显示启用 7.0 targetSDK为7.0的后台服务器不在收到网络变化的广播。所有7.0系统的手机上后台新建图片和视频的广播 7.0 tragetSDK为7.0+，开发者不能放宽私有文件访问权限，分享私有文件的方法为FileProvider 7.0 设备所有者，可以通过使用DevicePolicyManager.getWifiMacAddress访问mac地址，如果wifi没有启用过返回null 8.0 进一步限制清单注册的隐式广播 8.0 降低后台应用接收位置信息的频率 8.0 以前用户请求一权限组中的某一权限是，系统自动授予了权限组的其他权限。8.0后系统修复了这一bug，改为，请求那一具体权限，授予这一具体权限，但是下次请求这一具体权限所在权限组的其他权限是，系统默认授予，而不是提示用户。 在 Android 8.0 之前，如果应用在运行时请求权限并且被授予该权限，系统会错误地将属于同一权限组并且在清单中注册的其他权限也一起授予应用。 对于针对 Android 8.0 的应用，此行为已被纠正。系统只会授予应用明确请求的权限。然而，一旦用户为应用授予某个权限，则所有后续对该权限组中权限的请求都将被自动批准。 例如，假设某个应用在其清单中列出 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE。应用请求 READ_EXTERNAL_STORAGE，并且用户授予了该权限。如果该应用针对的是 API 级别 24 或更低级别，系统还会同时授予 WRITE_EXTERNAL_STORAGE，因为该权限也属于同一 STORAGE 权限组并且也在清单中注册过。如果该应用针对的是 Android 8.0，则系统此时仅会授予 READ_EXTERNAL_STORAGE；不过，如果该应用后来又请求 WRITE_EXTERNAL_STORAGE，则系统会立即授予该权限，而不会提示用户。 android 8.0 后 androidID，不同app、相同证书获取的ID相同；不同app、不同证书获取到的ID不同；相同APP，不同证书、卸载重装之后或者重启手机之后获取到的ID不同。 android 8.0 以后获取设备账号接口不可直接使用；需要用户授予权限GET_ACCOUNTS，然后： 123Intent googlePicker = AccountManager.newChooseAccountIntent(null, null, new String[] &#123; "com.google"&#125;, true, null, null, null, null);startActivityForResult(googlePicker, PICK_ACCOUNT_REQUEST); 8.0 Build.SERIAL 已弃用。需要知道硬件序列号的应用应改为使用新的 Build.getSerial() 函数，该函数要求具有 READ_PHONE_STATE 权限。 9.0 电源管理： Android 9 引入了一项新的电池管理功能，即应用待机群组。 应用待机群组可以基于应用最近使用时间和使用频率，帮助系统排定应用请求资源的优先级。 根据使用模式，每个应用都会归类到五个优先级群组之一中。 系统将根据应用所属的群组限制每个应用可以访问的设备资源。 五个群组按照以下特性将应用分组： 活跃 如果用户当前正在使用应用，应用将被归到“活跃”群组中，例如：应用已启动一个 Activity应用正在运行前台服务应用的同步适配器与某个前台应用使用的 content provider 关联用户在应用中点击了某个通知如果应用处于“活跃”群组，系统不会对应用的作业、报警或 FCM 消息施加任何限制。 工作集 如果应用经常运行，但当前未处于活跃状态，它将被归到“工作集”群组中。 例如，用户在大部分时间都启动的某个社交媒体应用可能就属于“工作集”群组。 如果应用被间接使用，它们也会被升级到“工作集”群组中 。如果应用处于“工作集”群组，系统会对它运行作业和触发报警的能力施加轻度限制。 如需了解详细信息，请参阅电源管理限制。 常用 如果应用会定期使用，但不是每天都必须使用，它将被归到“常用”群组中。 例如，用户在健身房运行的某个锻炼跟踪应用可能就属于“常用”群组。如果应用处于“常用”群组，系统将对它运行作业和触发报警的能力施加较强的限制，也会对高优先级 FCM 消息的数量设定限制。 如需了解详细信息，请参阅电源管理限制。 极少使用 如果应用不经常使用，那么它属于“极少使用”群组。 例如，用户仅在入住酒店期间运行的酒店应用就可能属于“极少使用”群组。 如果应用处于“极少使用”群组，系统将对它运行作业、触发警报和接收高优先级 FCM 消息的能力施加严格限制。系统还会限制应用连接到网络的能力。 如需了解详细信息，请参阅电源管理限制。 从未使用 安装但是从未运行过的应用会被归到“从未使用”群组中。 系统会对这些应用施加极强的限制。 系统会动态地将每个应用归类到某个优先级群组，并根据需要重新归类。 系统可能会依靠某个使用机器学习的预加载应用确定每个应用的使用可能性，并将应用归类到合适的群组。 如果设备上不存在系统应用，系统默认将基于应用的最近使用时间对它们进行排序。 更为活跃的应用将被归类到为应用提供更高优先级的群组，从而让应用可以使用更多系统资源。 具体而言，群组决定应用运行作业的频率，应用可以触发报警的频率，以及应用可以接收高优先级 Firebase 云信息传递 (FCM) 消息的频率。 这些限制仅在设备使用电池电量时适用，如果设备正在充电，系统不会对应用施加这些限制。 每个制造商都可以设定自己的标准来归类非活跃应用。 您不应当尝试影响应用所属的群组。 相反，您应当将精力放在确保应用在所属的群组内良好运行上。 您的应用可以通过调用新函数 UsageStatsManager.getAppStandbyBucket() 查找当前属于哪个群组。 注：位于 低电耗模式白名单中的应用不适用基于应用待机群组的限制。 9.0 省电模式： Android 9 对省电模式进行了多处改进。 设备制造商可以决定施加的确切限制。 例如，在 AOSP 构建中，系统会应用以下限制： 系统会更积极地将应用置于应用待机模式，而不是等待应用空闲。 后台执行限制适用于所有应用，无论它们的目标 API 级别如何。 当屏幕关闭时，位置服务可能会被停用。 后台应用没有网络访问权限。 9.0 限制后台对传感器的访问 Android 9 限制后台应用访问用户输入和传感器数据的能力。 如果您的应用在运行 Android 9 设备的后台运行，系统将对您的应用采取以下限制： 您的应用不能访问麦克风或摄像头。 使用连续报告模式的传感器（例如加速度计和陀螺仪）不会接收事件。 使用变化或一次性报告模式的传感器不会接收事件。 如果您的应用需要在运行 Android 9 的设备上检测传感器事件，请使用前台服务。 9.0 限制 访问通话记录 Android 9 引入 CALL_LOG 权限组并将 READ_CALL_LOG、WRITE_CALL_LOG 和 PROCESS_OUTGOING_CALLS 权限移入该组。 在之前的 Android 版本中，这些权限位于 PHONE 权限组。 对于需要访问通话敏感信息（如读取通话记录和识别电话号码）的应用，该 CALL_LOG 权限组为用户提供了更好的控制和可见性。 如果您的应用需要访问通话记录或者需要处理去电，则您必须向 CALL_LOG 权限组明确请求这些权限。 否则会发生 SecurityException。 9.0 限制访问电话号码 在未首先获得 READ_CALL_LOG 权限的情况下，除了应用的用例需要的其他权限之外，运行于 Android 9 上的应用无法读取电话号码或手机状态。 与来电和去电关联的电话号码可在手机状态广播（比如来电和去电的手机状态广播）中看到，并可通过 PhoneStateListener 类访问。 但是，如果没有 READ_CALL_LOG 权限，则 PHONE_STATE_CHANGED 广播和 PhoneStateListener 提供的电话号码字段为空。 要从手机状态中读取电话号码，请根据您的用例更新应用以请求必要的权限： 要通过 PHONE_STATE Intent 操作读取电话号码，同时需要 READ_CALL_LOG 权限和 READ_PHONE_STATE 权限。 要从 onCallStateChanged() 中读取电话号码，只需要 READ_CALL_LOG 权限。 不需要 READ_PHONE_STATE 权限。 9.0 限制访问wifi位置和连接信息。简单说，9.0以前扫描wifi只需要2个权限，并且前台扫描无限制，后台扫描每个APP30分钟可以扫描一次；9.0以后，除了权限还需要开启位置服务，前台2分钟扫描4次，后台所有app30分钟扫描一次。 在 Android 9 中，应用进行 Wi-Fi 扫描的权限要求比之前的版本更严格。 详情请参阅 Wi-Fi 扫描限制。 类似的限制也适用于 getConnectionInfo() 函数，该函数返回描述当前 Wi-Fi 连接的 WifiInfo 对象。 如果调用应用具有以下权限，则只能使用该对象的函数来检索 SSID 和 BSSID 值： ACCESS_FINE_LOCATION 或 ACCESS_COARSE_LOCATION ACCESS_WIFI_STATE 检索 SSID 或 BSSID 还需要在设备上启用位置服务（在 Settings &gt; Location 下）。 9.0 wifi服务中移出了部分信息 在 Android 9 中，下列事件和广播不接收用户位置或个人可识别数据方面的信息： WifiManager 中的 getScanResults() 和 getConnectionInfo() 函数。 WifiP2pManager 中的 [discoverServices()](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html?hl=zh-cn#discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)) 和 [addServiceRequest()](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html?hl=zh-cn#addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)) 函数。 NETWORK_STATE_CHANGED_ACTION 广播。 Wi-Fi 的 NETWORK_STATE_CHANGED_ACTION系统广播不再包含 SSID（之前为 EXTRA_SSID）、BSSID（之前为 EXTRA_BSSID）或连接信息（之前为 EXTRA_NETWORK_INFO）。 如果应用需要此信息，请改为调用getConnectionInfo()。 9.0 电话信息现在依赖设备位置设置 getAllCellInfo() [listen()](https://developer.android.com/reference/android/telephony/TelephonyManager.html?hl=zh-cn#listen(android.telephony.PhoneStateListener, int)) getCellLocation() getNeighboringCellInfo() 9.0 加密程序变更 https://www.jianshu.com/p/2b22daa8e2f6 Q 目标api 23以下的app会受到警告 在 Android Q 中，当用户首次运行以 Android 6.0（API 级别 23）以下的版本为目标平台的任何应用时，Android 平台会向用户发出警告。如果此应用要求用户授予权限，则系统会先向用户提供调整应用权限的机会，然后才会允许此应用首次运行。 Q 撤消了 /proc/net 访问权限 Q 开始，应用必须具有 READ_PRIVILEGED_PHONE_STATE 特许权限才能访问设备的不可重置标识符（包含 IMEI 和序列号）。 如果应用以 Android Q 为目标平台，则会发生 SecurityException。 如果应用以 Android 9（API 级别 28）或更低版本为目标平台，则相应方法会返回 null 或占位符数据（如果应用具有 READ_PHONE_STATE 权限）。否则，会发生 SecurityException。 Q 后台APP不可访问剪切板 Q 无法启用、停用 WIFI；如果必须，使用设置面板 Q telephony API、WLAN API 和 Bluetooth API 需要精确位置权限]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
</search>
